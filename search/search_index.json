{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":"<p>Integrating the AdMob plugin into your Godot project, specifically for Godot v4.1+, is the initial and crucial step in enabling ad displays and revenue generation. After successfully incorporating this plugin, you'll have the flexibility to select from various ad formats, like Banner or Interstitial, and proceed with the necessary implementation steps.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Use Godot v4.1 or higher</li> <li>Deploy Android:<ul> <li><code>minSdkVersion</code> of 19 or higher</li> <li><code>compileSdkVersion</code> of 28 or higher</li> </ul> </li> <li>Deploy iOS:<ul> <li>Use Xcode 14.1 or higher</li> <li>Target iOS 11.0 or higher</li> <li>CocoaPods</li> </ul> </li> <li>Recommended: Create an AdMob account and register an app.</li> </ul>"},{"location":"#download-the-godot-admob-plugin-from-poing-studios","title":"Download the Godot AdMob Plugin from Poing Studios","text":"<p>The Godot AdMob Plugin from Poing Studios simplifies the process for Godot developers to incorporate Google Mobile Ads into their Android and iOS apps, eliminating the need to write Java/Kotlin or Objective-C++ code. Instead, this plugin offers a GDScript-based interface for ad requests, which can be seamlessly integrated into your Godot project. </p> <p>To access the plugin, you can either download the Godot package provided or explore its source code on GitHub through the links below.</p> <p>Download from GitHub Download from AssetLibrary Source Code</p>"},{"location":"#importing-the-godot-admob-plugin-on-project","title":"Importing the Godot AdMob Plugin on Project","text":"<p>The AdMob plugin for Godot is conveniently available via AssetLib. To import this plugin into your Godot project, follow these steps:</p> <ol> <li>Open your Godot project.</li> <li>Navigate to AssetLib within the Godot editor.</li> <li>In the search bar, enter <code>AdMob</code> and ensure that the publisher is set to <code>poing.studios</code>. </li> <li>Locate the AdMob plugin and click the <code>Download</code> button.</li> <li>Once the download is complete, go to <code>Project &gt; Project Settings</code> within the Godot editor.</li> <li>In the <code>Plugins</code> section, find the <code>AdMob</code> plugin and activate it. </li> <li>With these steps, you'll have successfully integrated the AdMob plugin into your Godot project without the need for additional manual file imports.</li> </ol>"},{"location":"#obtaining-external-libraries","title":"Obtaining external libraries","text":"AndroidiOS <p>To integrate the required Android library for AdMob in Godot, follow these steps:</p> <ol> <li>In Godot, navigate to <code>Project &gt; Tools &gt; AdMob Download Manager &gt; Android &gt; LatestVersion</code>.</li> <li>This action will download the appropriate Android library into your project, which is located at <code>res://addons/admob/downloads/android/</code>.</li> </ol> <p>If you encounter any issues with the download, you can try downloading the library manually by clicking here.</p> <p>To integrate the required iOS library for AdMob in Godot, follow these steps:</p> <ol> <li>In Godot, navigate to <code>Project &gt; Tools &gt; AdMob Download Manager &gt; iOS &gt; LatestVersion</code>.</li> <li>This action will download the appropriate iOS library into your project, which is located at <code>res://addons/admob/downloads/ios/</code>.</li> </ol> <p>If you encounter any issues with the download, you can try downloading the library manually by clicking here.</p>"},{"location":"#installing","title":"Installing","text":"AndroidiOS <ol> <li>Install the Android Build Template by navigating to <code>Project &gt; Install Android Build Template</code>.</li> <li>Go to the directory <code>res://android/plugins/</code> and extract the contents of the <code>ads</code> folder from the downloaded <code>.zip</code> located at <code>res://addons/admob/downloads/android/</code>. If you have Mediation, do the same for <code>meta</code>, <code>adcolony</code> etc.... </li> <li>Add your AdMob App ID to your app's <code>res://android/build/AndroidManifest.xml</code> file by adding a <code>&lt;meta-data&gt;</code> tag with name <code>com.google.android.gms.ads.APPLICATION_ID</code>, as shown below. If you don't do this then you App will crash on start-up. <pre><code>&lt;!-- Sample AdMob app ID: ca-app-pub-3940256099942544~3347511713 --&gt;\n&lt;meta-data\n    android:name=\"com.google.android.gms.ads.APPLICATION_ID\"\n    android:value=\"ca-app-pub-xxxxxxxxxxxxxxxx~yyyyyyyyyy\"/&gt;\n</code></pre>     3.1. Important \u2014 App ID vs Ad Unit ID<ul> <li>App ID (contains <code>~</code>): used for app registration and manifest.</li> <li>Ad Unit ID (contains <code>/</code>): used to load specific ad formats (banner, rewarded, etc.).</li> </ul> </li> <li>When exporting your project, select <code>Use Custom Build</code> and ensure that <code>Ad Mob</code> is enabled, If you have Mediation, also mark <code>Ad Mob Meta</code>, <code>Ad Mob AdColony</code> etc... </li> </ol> <ol> <li>Create the iOS Plugin folder if doesn't exists on <code>res://ios/plugins/</code>.</li> <li>Go to the directory <code>res://ios/plugins/</code> and extract the contents of the <code>ads</code> folder from the downloaded <code>.zip</code> located at <code>res://addons/admob/downloads/ios/</code>. If you have Mediation, do the same for <code>meta</code>, <code>adcolony</code> etc.... </li> <li>Within <code>res://ios/plugins/poing-godot-admob-ads.gdip</code>, if you are using Mediation, locate the <code>SKAdNetworkItems</code> section. Here, you can remove the comments associated with the Mediation Networks that you are using. </li> <li>When exporting your project, update the <code>GADApplicationIdentifier</code> with your AdMob App ID and and ensure that <code>Ad Mob</code> is enabled, If you have Mediation, also mark <code>Ad Mob Meta</code>, <code>Ad Mob AdColony</code> etc...      4.1. Important \u2014 App ID vs Ad Unit ID<ul> <li>App ID (contains <code>~</code>): used for app registration and manifest.</li> <li>Ad Unit ID (contains <code>/</code>): used to load specific ad formats (banner, rewarded, etc.).</li> </ul> </li> <li>Once exported, go to <code>{{ ios_xcode_export_folder }}/{{your_project_name}}/ios/plugins/poing-godot-admob/scripts/</code> folder and open the terminal (must be inside this folder) and run these commands: <pre><code>chmod +x update_and_install.sh\n./update_and_install.sh\n</code></pre> </li> <li>This will create for your a <code>{{ your_project_name }}.xcworkspace</code> (e.g.: <code>AdMobAddon.xcworkspace</code>) file on your <code>{{ ios_xcode_export_folder }}</code>, open this file.</li> <li>Go to the Target of your Application and them <code>General -&gt; Frameworks, Libraries, and Embedded Content</code> and add all <code>Pods</code> in section. </li> <li>Select all Frameworks (\u2318 + A) and put as <code>Do Not Embed</code> </li> <li>Run the Game.</li> <li>If you are trying to run on Simulator and is not working read this.</li> </ol>"},{"location":"#initialize-the-google-mobile-ads-sdk","title":"Initialize the Google Mobile Ads SDK","text":"<p>Prior to loading ads, ensure that your application initializes the Google Mobile Ads SDK. You can accomplish this by calling MobileAds.initialize(). This function initializes the SDK and triggers a completion listener once the initialization process is finished, or if it exceeds a 30-second timeout. It's important to note that this initialization should occur only once, ideally during the app's launch phase.</p> <pre><code>func _ready() -&gt; void:\n    MobileAds.initialize()\n</code></pre> <p>If you are utilizing mediation, it's essential to wait for the completion handler to be called before proceeding with ad loading. This step ensures that all mediation adapters are properly initialized before ad requests are made.</p>"},{"location":"#select-an-ad-format","title":"Select an ad format","text":"<p>The Google Mobile Ads SDK is now successfully imported, and you are prepared to integrate an ad into your app. AdMob provides a variety of ad formats, allowing you to select the one that aligns best with your app's user experience.</p>"},{"location":"#banner","title":"Banner","text":"<p>Banner ads are rectangular advertisements, consisting of either images or text, that are integrated into an app's layout. These ads remain on the screen while users engage with the app and can automatically refresh after a designated time interval. If you're new to mobile advertising, banner ads provide an excellent starting point for your ad implementation journey.</p> <p>Implement banner ads</p>"},{"location":"#interstitial","title":"Interstitial","text":"<p>Interstitial ads are expansive, full-screen advertisements that overlay an app's interface and persist until they are closed by the user. They are most effective when strategically placed during natural pauses in the app's execution, such as between levels of a game or immediately after the completion of a task.</p> <p>Implement interstitial ads</p>"},{"location":"#rewarded","title":"Rewarded","text":"<p>Rewarded video ads are immersive, full-screen video advertisements that provide users with the choice to watch them entirely. In return for their time and attention, users receive in-app rewards or benefits.</p> <p>Implement rewarded ads</p>"},{"location":"#rewarded-interstitial","title":"Rewarded Interstitial","text":"<p>A Rewarded Interstitial is a specific form of incentivized ad format that allows you to provide rewards in exchange for ads that appear automatically during natural app transitions. Unlike regular rewarded ads, users are not obligated to actively opt in to view a Rewarded Interstitial; they are seamlessly integrated into the app experience.</p> <p>Implement rewarded interstitial ads</p>"},{"location":"enable_test_ads/","title":"Enable test ads","text":"<p>This guide provides instructions on enabling test ads in your ad integration. It's crucial to enable test ads during the development phase to allow clicking on them without incurring charges to Google advertisers. Clicking on too many ads without being in test mode may lead to your account being flagged for invalid activity.</p> <p>To obtain test ads, you have two options:</p> <ol> <li>Use Google's Sample Ad Units.</li> <li>Utilize Your Own Ad Unit and Enable Test Devices.</li> </ol> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"enable_test_ads/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> </ul>"},{"location":"enable_test_ads/#sample-ad-units","title":"Sample ad units","text":"<p>The most expedient method to enable testing is by employing Google's provided test ad units. These ad units are separate from your AdMob account, ensuring there is no risk of your account generating invalid traffic while using them.</p> <p>Please keep in mind that you should select the appropriate Google-provided test ad unit based on the platform you are testing. Use an iOS test ad unit for making test ad requests on iOS and an Android test ad unit for making requests on Android.</p> <p>Note</p> <p>Important Note: Prior to releasing your app, be certain to substitute these test IDs with your own ad unit ID.</p> <p>Below are sample ad units for each format available on both Android and iOS:</p> AndroidiOS Ad format Sample ad unit ID Banner ca-app-pub-3940256099942544/6300978111 Interstitial ca-app-pub-3940256099942544/1033173712 Rewarded ca-app-pub-3940256099942544/5224354917 Rewarded Interstitial ca-app-pub-3940256099942544/5354046379 Ad format Sample ad unit ID Banner ca-app-pub-3940256099942544/2934735716 Interstitial ca-app-pub-3940256099942544/4411468910 Rewarded ca-app-pub-3940256099942544/1712485313 Rewarded Interstitial ca-app-pub-3940256099942544/6978759866"},{"location":"enable_test_ads/#enable-test-devices","title":"Enable test devices","text":"<p>To conduct more thorough testing with production-like ads, you can configure your device as a test device and utilize your own ad unit IDs created in the AdMob UI. You can add test devices either through the AdMob UI or programmatically using the Google Mobile Ads SDK.</p> <p>Here are the steps to add your device as a test device:</p> <p>Note</p> <p>Important Note: Android emulators and iOS simulators are automatically configured as test devices. This means that you can test ads on these virtual devices without needing to manually add them to your test devices list.</p>"},{"location":"enable_test_ads/#add-your-test-device-in-the-admob-ui","title":"Add your test device in the AdMob UI","text":"<p>For a straightforward, non-programmatic method to include a test device and test new or existing app builds, you can use the AdMob UI. Here's how.</p> <p>Note</p> <p>Important Note: Newly added test devices typically begin serving test ads in your app within 15 minutes, although it may also take up to 24 hours for the configuration to take effect.</p>"},{"location":"enable_test_ads/#add-your-test-device-programmatically","title":"Add your test device programmatically","text":"<p>If you wish to test ads within your app during the development phase and want to programmatically register your test device, adhere to the steps below:</p> <ol> <li>Open your app with integrated ads and initiate an ad request.</li> <li> <p>Check the logcat output for a message that looks like the one below, which shows you your device ID and how to add it as a test device:</p> AndroidiOS <pre><code>I/Ads: Use RequestConfiguration.Builder.setTestDeviceIds(Arrays.asList(\"33BE2250B43518CCDA7DE426D04EE231\")) \nto get test ads on this device.\"\n</code></pre> <pre><code>&lt;Google&gt; To get test ads on this device, set:\nGADMobileAds.sharedInstance.requestConfiguration.testDeviceIdentifiers =\n@[ @\"2077ef9a63d2b398840261c8221a0c9b\" ];\n</code></pre> <p>Copy your test device ID to your clipboard.</p> </li> <li> <p>Update your code to include the test device IDs within your <code>RequestConfiguration.test_device_ids</code> array like this:</p> </li> </ol> <pre><code>func _ready() -&gt; void:\n    var request_configuration := RequestConfiguration.new()\n    request_configuration.test_device_ids = [\"2077ef9a63d2b398840261c8221a0c9b\"]\n    MobileAds.set_request_configuration(request_configuration)\n</code></pre> <p>Info</p> <p>Remember to eliminate the code responsible for defining these test devices prior to releasing your app.</p> <ol> <li>Re-launch your app. If the ad is a Google ad, you'll observe a Test Ad label positioned at the top center of the ad, whether it's a banner, interstitial, or rewarded video ad: </li> </ol> <p>Info</p> <p>Please note that mediated ads do NOT display a Test Ad label. Refer to the section below for further information.</p>"},{"location":"enable_test_ads/#testing-with-mediation","title":"Testing with mediation","text":"<p>Google's sample ad units exclusively display Google Ads. To test your mediation setup effectively, you must employ the method of enabling test devices.</p> <p>Mediated ads do NOT exhibit a \"Test Ad\" label. Consequently, it is your responsibility to ensure that test ads are enabled for each of your mediation networks to prevent these networks from flagging your account for invalid activity. Refer to each network's individual mediation guide for detailed instructions.</p> <p>If you are uncertain about whether a mediation ad network adapter supports test ads, it is advisable to refrain from clicking on ads from that network during the development phase. You can utilize the ResponseInfo.mediation_adapter_class_name property within any of the ad formats to determine which ad network served the current ad.</p>"},{"location":"ios_pause_background/","title":"iOS Pause Background","text":"<p>This step is only for iOS, it will indicate if your Game in Godot should be paused or not when a full-screen ad is shown, such as Interstitial, Rewarded, and Rewarded Interstitial.</p> <p>On Android, your game will be automatically paused when a full-screen ad is shown (Google doesn't allow it to configure). Calling this method passing a <code>true</code> parameter will duplicate this behavior on iOS.</p> <p>On iOS, the default value is <code>false</code>.</p>"},{"location":"ios_pause_background/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> <li>Use Godot v4.1 or higher</li> <li>Use AdMob Plugin Editor and iOS: v3.1.0+</li> </ul>"},{"location":"ios_pause_background/#how-to-use","title":"How to use","text":"<p>You can use this whenever you want this method, before, during, or after the initialization, such as:</p> <pre><code>func _on_set_ios_app_pause_on_background_button_pressed() -&gt; void:\n    MobileAds.set_ios_app_pause_on_background(true)\n</code></pre>"},{"location":"ios_pause_background/#important-notes","title":"Important notes","text":"<p>If your game is multiplayer, probably you will need this value as <code>false</code> due to connection issues.  Read more about it here.</p>"},{"location":"ad_formats/interstitial/","title":"Interstitial","text":"<p>Interstitial ads are expansive, full-screen advertisements that overlay an app's interface and persist until they are closed by the user. They are most effective when strategically placed during natural pauses in the app's execution, such as between levels of a game or immediately after the completion of a task.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"ad_formats/interstitial/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> </ul>"},{"location":"ad_formats/interstitial/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When developing and testing your Godot apps, it's crucial to use test ads rather than live production ads. Failure to do so can result in the suspension of your AdMob account.</p> <p>The most straightforward method to load test ads is by utilizing our dedicated test ad unit ID for Android and iOS interstitial:</p> AndroidiOS <pre><code>ca-app-pub-3940256099942544/1033173712\n</code></pre> <pre><code>ca-app-pub-3940256099942544/4411468910\n</code></pre> <p>This particular ad unit ID has been purposefully configured to deliver test ads for every request. You can safely employ it during your coding, testing, and debugging phases. However, remember to replace this test ad unit ID with your own when you are ready to publish your app.</p> <p>For a more comprehensive understanding of how the Mobile Ads SDK's test ads function, please refer to our documentation on Test Ads.</p>"},{"location":"ad_formats/interstitial/#interstitial-example","title":"Interstitial example","text":"<p>The code sample below demonstrates how to utilize the Interstitial. In this example, you'll create an instance of an Interstitial, load an ad into it using an AdRequest, and enhance functionality by handling various life cycle events.</p>"},{"location":"ad_formats/interstitial/#load-an-ad","title":"Load an ad","text":"<p>To load an interstitial ad, utilize the <code>InterstitialAdLoader</code> class. Pass in an <code>InterstitialAdLoadCallback</code> to receive the loaded ad or any potential errors. It's worth noting that, similar to other format load callbacks, the <code>InterstitialAdLoadCallback</code> leverages <code>LoadAdError</code> to provide comprehensive error details.</p> <pre><code>extends Node2D\n\nvar _interstitial_ad : InterstitialAd\n\nfunc _ready() -&gt; void:\n    #The initializate needs to be done only once, ideally at app launch.\n    MobileAds.initialize()\n\nfunc _on_load_pressed():\n    #free memory\n    if _interstitial_ad:\n        #always call this method on all AdFormats to free memory on Android/iOS\n        _interstitial_ad.destroy()\n        _interstitial_ad = null\n\n    var unit_id : String\n    if OS.get_name() == \"Android\":\n        unit_id = \"ca-app-pub-3940256099942544/1033173712\"\n    elif OS.get_name() == \"iOS\":\n        unit_id = \"ca-app-pub-3940256099942544/4411468910\"\n\n    var interstitial_ad_load_callback := InterstitialAdLoadCallback.new()\n    interstitial_ad_load_callback.on_ad_failed_to_load = func(adError : LoadAdError) -&gt; void:\n        print(adError.message)\n\n    interstitial_ad_load_callback.on_ad_loaded = func(interstitial_ad : InterstitialAd) -&gt; void:\n        print(\"interstitial ad loaded\" + str(interstitial_ad._uid))\n        _interstitial_ad = interstitial_ad\n\n    InterstitialAdLoader.new().load(unit_id, AdRequest.new(), interstitial_ad_load_callback)\n</code></pre>"},{"location":"ad_formats/interstitial/#configure-the-fullscreencontentcallback","title":"Configure the FullScreenContentCallback","text":"<p>The <code>FullScreenContentCallback</code> manages events associated with the display of your <code>InterstitialAd</code>. Before presenting the <code>InterstitialAd</code>, ensure that you configure the callback:</p> <pre><code>extends Node2D\n\nvar _interstitial_ad : InterstitialAd\nvar _full_screen_content_callback := FullScreenContentCallback.new()\n\nfunc _ready() -&gt; void:\n    #...\n    _full_screen_content_callback.on_ad_clicked = func() -&gt; void:\n        print(\"on_ad_clicked\")\n    _full_screen_content_callback.on_ad_dismissed_full_screen_content = func() -&gt; void:\n        print(\"on_ad_dismissed_full_screen_content\")\n    _full_screen_content_callback.on_ad_failed_to_show_full_screen_content = func(ad_error : AdError) -&gt; void:\n        print(\"on_ad_failed_to_show_full_screen_content\")\n    _full_screen_content_callback.on_ad_impression = func() -&gt; void:\n        print(\"on_ad_impression\")\n    _full_screen_content_callback.on_ad_showed_full_screen_content = func() -&gt; void:\n        print(\"on_ad_showed_full_screen_content\")\n\nfunc _on_load_pressed():\n    #...\n    var interstitial_ad_load_callback := InterstitialAdLoadCallback.new()\n\n    #...\n\n    interstitial_ad_load_callback.on_ad_loaded = func(interstitial_ad : InterstitialAd) -&gt; void:\n        print(\"interstitial ad loaded\" + str(interstitial_ad._uid))\n        _interstitial_ad = interstitial_ad\n        _interstitial_ad.full_screen_content_callback = _full_screen_content_callback\n\n    #...\n</code></pre>"},{"location":"ad_formats/interstitial/#show-the-ad","title":"Show the ad","text":"<p>Interstitial ads are ideally displayed during organic breaks in the app's progression. Examples include between game levels or after a user accomplishes a task. To present an interstitial ad, employ the <code>show()</code> function.</p> <pre><code>func _on_show_pressed():\n    if _interstitial_ad:\n        _interstitial_ad.show()\n</code></pre>"},{"location":"ad_formats/interstitial/#clean-up-memory","title":"Clean up memory","text":"<p>Upon completion of an <code>InterstitialAd</code>, it's important to invoke the <code>destroy()</code> function before releasing your reference to it:</p> <pre><code>if _interstitial_ad:\n    _interstitial_ad.destroy()\n    _interstitial_ad = null\n</code></pre> <p>This action signals to the plugin that the object is no longer in use and that the memory it occupies can be reclaimed. Neglecting to call this method can lead to memory leaks.</p>"},{"location":"ad_formats/interstitial/#best-practices-for-interstitial-ads","title":"Best Practices for Interstitial Ads","text":"<ol> <li> <p>Consider Relevance:</p> <ul> <li>Evaluate whether interstitial ads are suitable for your app.</li> <li>Interstitial ads work best in apps with natural transition points, such as task completions or level advancements. Ensure these points align with the user's expectation for a break in the action.</li> </ul> </li> <li> <p>Pause App Activity:</p> <ul> <li>When displaying an interstitial ad, pause relevant app activities to allow the ad to use specific resources effectively.</li> <li>For example, suspend audio output when displaying an interstitial ad to enhance the ad experience.</li> </ul> </li> <li> <p>Optimize Loading Time:</p> <ul> <li>Load interstitial ads in advance by calling <code>InterstitialAdLoader.new().load()</code> before invoking <code>show()</code>. This ensures that your app has a fully loaded interstitial ad ready when it's time to display one.</li> </ul> </li> <li> <p>Avoid Overloading with Ads:</p> <ul> <li>Refrain from inundating users with excessive interstitial ads.</li> <li>An overly frequent ad display can hinder the user experience and reduce clickthrough rates. Strike a balance that allows users to enjoy your app without constant interruptions.</li> </ul> </li> </ol> <p>Remember that implementing interstitial ads should enhance, not detract from, the user experience in your app.</p>"},{"location":"ad_formats/interstitial/#further-references","title":"Further References","text":""},{"location":"ad_formats/interstitial/#samples","title":"Samples","text":"<ul> <li>Sample Project: A Minimal Illustration of usage of all Ad Formats</li> </ul>"},{"location":"ad_formats/rewarded/","title":"Rewarded","text":"<p>Rewarded video ads are immersive, full-screen video advertisements that provide users with the choice to watch them entirely. In return for their time and attention, users receive in-app rewards or benefits.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"ad_formats/rewarded/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> </ul>"},{"location":"ad_formats/rewarded/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When developing and testing your Godot apps, it's crucial to use test ads rather than live production ads. Failure to do so can result in the suspension of your AdMob account.</p> <p>The most straightforward method to load test ads is by utilizing our dedicated test ad unit ID for Android and iOS rewarded:</p> AndroidiOS <pre><code>ca-app-pub-3940256099942544/5224354917\n</code></pre> <pre><code>ca-app-pub-3940256099942544/1712485313\n</code></pre> <p>This particular ad unit ID has been purposefully configured to deliver test ads for every request. You can safely employ it during your coding, testing, and debugging phases. However, remember to replace this test ad unit ID with your own when you are ready to publish your app.</p> <p>For a more comprehensive understanding of how the Mobile Ads SDK's test ads function, please refer to our documentation on Test Ads.</p>"},{"location":"ad_formats/rewarded/#rewarded-example","title":"Rewarded example","text":"<p>The code sample below demonstrates how to utilize the Rewarded. In this example, you'll create an instance of an Rewarded, load an ad into it using an AdRequest, and enhance functionality by handling various life cycle events.</p>"},{"location":"ad_formats/rewarded/#load-an-ad","title":"Load an ad","text":"<p>To load an rewarded ad, utilize the <code>RewardedAdLoader</code> class. Pass in an <code>RewardedAdLoadCallback</code> to receive the loaded ad or any potential errors. It's worth noting that, similar to other format load callbacks, the <code>RewardedAdLoadCallback</code> leverages <code>LoadAdError</code> to provide comprehensive error details.</p> <pre><code>extends Node2D\n\nvar _rewarded_ad : RewardedAd\n\nfunc _ready() -&gt; void:\n    #The initializate needs to be done only once, ideally at app launch.\n    MobileAds.initialize()\n\nfunc _on_load_pressed():\n    #free memory\n    if _rewarded_ad:\n        #always call this method on all AdFormats to free memory on Android/iOS\n        _rewarded_ad.destroy()\n        _rewarded_ad = null\n\n    var unit_id : String\n    if OS.get_name() == \"Android\":\n        unit_id = \"ca-app-pub-3940256099942544/5224354917\"\n    elif OS.get_name() == \"iOS\":\n        unit_id = \"ca-app-pub-3940256099942544/1712485313\"\n\n    var rewarded_ad_load_callback := RewardedAdLoadCallback.new()\n    rewarded_ad_load_callback.on_ad_failed_to_load = func(adError : LoadAdError) -&gt; void:\n        print(adError.message)\n\n    rewarded_ad_load_callback.on_ad_loaded = func(rewarded_ad : RewardedAd) -&gt; void:\n        print(\"rewarded ad loaded\" + str(rewarded_ad._uid))\n        _rewarded_ad = rewarded_ad\n\n    RewardedAdLoader.new().load(unit_id, AdRequest.new(), rewarded_ad_load_callback)\n</code></pre>"},{"location":"ad_formats/rewarded/#optional-validate-server-side-verification-ssv-callbacks","title":"[Optional] Validate server-side verification (SSV) callbacks","text":"<p>For apps that necessitate additional data in server-side verification Android/iOS callbacks, the custom data feature of rewarded ads can be employed. Any string value assigned to a rewarded ad object is transmitted to the <code>custom_data</code> query parameter of the SSV callback. If no custom data is set, the <code>custom_data</code> query parameter will be absent in the SSV callback.</p> <p>The following code snippet illustrates how to establish custom data on a rewarded ad object before soliciting an ad:</p> <pre><code>rewarded_ad_load_callback.on_ad_loaded = func(rewarded_ad : RewardedAd) -&gt; void:\n    print(\"rewarded ad loaded\" + str(rewarded_ad._uid))\n\n    var server_side_verification_options := ServerSideVerificationOptions.new()\n    server_side_verification_options.custom_data = \"TEST PURPOSE\"\n    server_side_verification_options.user_id = \"user_id_test\"\n    rewarded_ad.set_server_side_verification_options(server_side_verification_options)\n\n    _rewarded_ad = rewarded_ad\n</code></pre> <p>Note</p> <p>The custom reward string is percent escaped and might require decoding when parsed from the SSV callback.</p>"},{"location":"ad_formats/rewarded/#configure-the-fullscreencontentcallback","title":"Configure the FullScreenContentCallback","text":"<p>The <code>FullScreenContentCallback</code> manages events associated with the display of your <code>RewardedAd</code>. Before presenting the <code>RewardedAd</code>, ensure that you configure the callback:</p> <pre><code>extends Node2D\n\nvar _rewarded_ad : RewardedAd\nvar _full_screen_content_callback := FullScreenContentCallback.new()\n\nfunc _ready() -&gt; void:\n    #...\n    _full_screen_content_callback.on_ad_clicked = func() -&gt; void:\n        print(\"on_ad_clicked\")\n    _full_screen_content_callback.on_ad_dismissed_full_screen_content = func() -&gt; void:\n        print(\"on_ad_dismissed_full_screen_content\")\n    _full_screen_content_callback.on_ad_failed_to_show_full_screen_content = func(ad_error : AdError) -&gt; void:\n        print(\"on_ad_failed_to_show_full_screen_content\")\n    _full_screen_content_callback.on_ad_impression = func() -&gt; void:\n        print(\"on_ad_impression\")\n    _full_screen_content_callback.on_ad_showed_full_screen_content = func() -&gt; void:\n        print(\"on_ad_showed_full_screen_content\")\n\nfunc _on_load_pressed():\n    #...\n    var rewarded_ad_load_callback := RewardedAdLoadCallback.new()\n\n    #...\n\n    rewarded_ad_load_callback.on_ad_loaded = func(rewarded_ad : RewardedAd) -&gt; void:\n        print(\"rewarded ad loaded\" + str(rewarded_ad._uid))\n        _rewarded_ad = rewarded_ad\n        _rewarded_ad.full_screen_content_callback = _full_screen_content_callback\n\n    #...\n</code></pre>"},{"location":"ad_formats/rewarded/#show-the-ad","title":"Show the ad","text":"<p>When presenting a rewarded ad, you'll employ an <code>OnUserEarnedRewardListener</code> object to manage reward-related events.</p> <pre><code>extends Node2D\n\nvar _rewarded_ad : RewardedAd\nvar on_user_earned_reward_listener := OnUserEarnedRewardListener.new()\n\nfunc _ready() -&gt; void:\n    #...\n    on_user_earned_reward_listener.on_user_earned_reward = func(rewarded_item : RewardedItem):\n        print(\"on_user_earned_reward, rewarded_item: rewarded\", rewarded_item.amount, rewarded_item.type)\n\n#...\nfunc _on_show_pressed():\n    if _rewarded_ad:\n        _rewarded_ad.show(on_user_earned_reward_listener)\n</code></pre>"},{"location":"ad_formats/rewarded/#clean-up-memory","title":"Clean up memory","text":"<p>Upon completion of an <code>RewardedAd</code>, it's important to invoke the <code>destroy()</code> function before releasing your reference to it:</p> <pre><code>if _rewarded_ad:\n    _rewarded_ad.destroy()\n    _rewarded_ad = null\n</code></pre> <p>This action signals to the plugin that the object is no longer in use and that the memory it occupies can be reclaimed. Neglecting to call this method can lead to memory leaks.</p>"},{"location":"ad_formats/rewarded/#further-references","title":"Further References","text":""},{"location":"ad_formats/rewarded/#samples","title":"Samples","text":"<ul> <li>Sample Project: A Minimal Illustration of usage of all Ad Formats</li> </ul>"},{"location":"ad_formats/rewarded_interstitial/","title":"Rewarded interstitial","text":"<p>A Rewarded Interstitial is a specific form of incentivized ad format that allows you to provide rewards in exchange for ads that appear automatically during natural app transitions. Unlike regular rewarded ads, users are not obligated to actively opt in to view a Rewarded Interstitial; they are seamlessly integrated into the app experience.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"ad_formats/rewarded_interstitial/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> </ul>"},{"location":"ad_formats/rewarded_interstitial/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When developing and testing your Godot apps, it's crucial to use test ads rather than live production ads. Failure to do so can result in the suspension of your AdMob account.</p> <p>The most straightforward method to load test ads is by utilizing our dedicated test ad unit ID for Android and iOS rewarded interstitial:</p> AndroidiOS <pre><code>ca-app-pub-3940256099942544/5354046379\n</code></pre> <pre><code>ca-app-pub-3940256099942544/6978759866\n</code></pre> <p>This particular ad unit ID has been purposefully configured to deliver test ads for every request. You can safely employ it during your coding, testing, and debugging phases. However, remember to replace this test ad unit ID with your own when you are ready to publish your app.</p> <p>For a more comprehensive understanding of how the Mobile Ads SDK's test ads function, please refer to our documentation on Test Ads.</p>"},{"location":"ad_formats/rewarded_interstitial/#rewarded-interstitial-example","title":"Rewarded interstitial example","text":"<p>The code sample below demonstrates how to utilize the Rewarded interstitial. In this example, you'll create an instance of an Rewarded interstitial, load an ad into it using an AdRequest, and enhance functionality by handling various life cycle events.</p>"},{"location":"ad_formats/rewarded_interstitial/#load-an-ad","title":"Load an ad","text":"<p>To load an rewarded interstitial ad, utilize the <code>RewardedInterstitialAdLoader</code> class. Pass in an <code>RewardedInterstitialAdLoadCallback</code> to receive the loaded ad or any potential errors. It's worth noting that, similar to other format load callbacks, the <code>RewardedInterstitialAdLoadCallback</code> leverages <code>LoadAdError</code> to provide comprehensive error details.</p> <pre><code>extends Node2D\n\nvar _rewarded_interstitial_ad : RewardedInterstitialAd\n\nfunc _ready() -&gt; void:\n    #The initializate needs to be done only once, ideally at app launch.\n    MobileAds.initialize()\n\nfunc _on_load_pressed():\n    #free memory\n    if _rewarded_interstitial_ad:\n        #always call this method on all AdFormats to free memory on Android/iOS\n        _rewarded_interstitial_ad.destroy()\n        _rewarded_interstitial_ad = null\n\n    var unit_id : String\n    if OS.get_name() == \"Android\":\n        unit_id = \"ca-app-pub-3940256099942544/5354046379\"\n    elif OS.get_name() == \"iOS\":\n        unit_id = \"ca-app-pub-3940256099942544/6978759866\"\n\n    var rewarded_interstitial_ad_load_callback := RewardedInterstitialAdLoadCallback.new()\n    rewarded_interstitial_ad_load_callback.on_ad_failed_to_load = func(adError : LoadAdError) -&gt; void:\n        print(adError.message)\n\n    rewarded_interstitial_ad_load_callback.on_ad_loaded = func(rewarded_interstitial_ad : RewardedInterstitialAd) -&gt; void:\n        print(\"rewarded interstitial ad loaded\" + str(rewarded_interstitial_ad._uid))\n        _rewarded_interstitial_ad = rewarded_interstitial_ad\n\n    RewardedInterstitialAdLoader.new().load(unit_id, AdRequest.new(), rewarded_interstitial_ad_load_callback)\n</code></pre>"},{"location":"ad_formats/rewarded_interstitial/#optional-validate-server-side-verification-ssv-callbacks","title":"[Optional] Validate server-side verification (SSV) callbacks","text":"<p>For apps that necessitate additional data in server-side verification Android/iOS callbacks, the custom data feature of rewarded ads can be employed. Any string value assigned to a rewarded ad object is transmitted to the <code>custom_data</code> query parameter of the SSV callback. If no custom data is set, the <code>custom_data</code> query parameter will be absent in the SSV callback.</p> <p>The following code snippet illustrates how to establish custom data on a rewarded interstitial ad object before soliciting an ad:</p> <pre><code>rewarded_interstitial_ad_load_callback.on_ad_loaded = func(rewarded_interstitial_ad : RewardedInterstitialAd) -&gt; void:\n    print(\"rewarded interstitial ad loaded\" + str(rewarded_interstitial_ad._uid))\n\n    var server_side_verification_options := ServerSideVerificationOptions.new()\n    server_side_verification_options.custom_data = \"TEST PURPOSE\"\n    server_side_verification_options.user_id = \"user_id_test\"\n    rewarded_interstitial_ad.set_server_side_verification_options(server_side_verification_options)\n\n    _rewarded_interstitial_ad = rewarded_interstitial_ad\n</code></pre> <p>Note</p> <p>The custom reward string is percent escaped and might require decoding when parsed from the SSV callback.</p>"},{"location":"ad_formats/rewarded_interstitial/#configure-the-fullscreencontentcallback","title":"Configure the FullScreenContentCallback","text":"<p>The <code>FullScreenContentCallback</code> manages events associated with the display of your <code>RewardedInterstitialAd</code>. Before presenting the <code>RewardedInterstitialAd</code>, ensure that you configure the callback:</p> <pre><code>extends Node2D\n\nvar _rewarded_interstitial_ad : RewardedInterstitialAd\nvar _full_screen_content_callback := FullScreenContentCallback.new()\n\nfunc _ready() -&gt; void:\n    #...\n    _full_screen_content_callback.on_ad_clicked = func() -&gt; void:\n        print(\"on_ad_clicked\")\n    _full_screen_content_callback.on_ad_dismissed_full_screen_content = func() -&gt; void:\n        print(\"on_ad_dismissed_full_screen_content\")\n    _full_screen_content_callback.on_ad_failed_to_show_full_screen_content = func(ad_error : AdError) -&gt; void:\n        print(\"on_ad_failed_to_show_full_screen_content\")\n    _full_screen_content_callback.on_ad_impression = func() -&gt; void:\n        print(\"on_ad_impression\")\n    _full_screen_content_callback.on_ad_showed_full_screen_content = func() -&gt; void:\n        print(\"on_ad_showed_full_screen_content\")\n\nfunc _on_load_pressed():\n    #...\n    var rewarded_interstitial_ad_load_callback := RewardedInterstitialAdLoadCallback.new()\n\n    #...\n\n    rewarded_interstitial_ad_load_callback.on_ad_loaded = func(rewarded_interstitial_ad : RewardedInterstitialAd) -&gt; void:\n        print(\"rewarded interstitial ad loaded\" + str(rewarded_interstitial_ad._uid))\n        _rewarded_interstitial_ad = rewarded_interstitial_ad\n        _rewarded_interstitial_ad.full_screen_content_callback = _full_screen_content_callback\n\n    #...\n</code></pre>"},{"location":"ad_formats/rewarded_interstitial/#show-the-ad","title":"Show the ad","text":"<p>When presenting a rewarded interstitial ad, you'll employ an <code>OnUserEarnedRewardListener</code> object to manage reward-related events.</p> <pre><code>extends Node2D\n\nvar _rewarded_interstitial_ad : RewardedInterstitialAd\nvar on_user_earned_reward_listener := OnUserEarnedRewardListener.new()\n\nfunc _ready() -&gt; void:\n    #...\n    on_user_earned_reward_listener.on_user_earned_reward = func(rewarded_item : RewardedItem):\n        print(\"on_user_earned_reward, rewarded_item: rewarded\", rewarded_item.amount, rewarded_item.type)\n\n#...\nfunc _on_show_pressed():\n    if _rewarded_interstitial_ad:\n        _rewarded_interstitial_ad.show(on_user_earned_reward_listener)\n</code></pre>"},{"location":"ad_formats/rewarded_interstitial/#clean-up-memory","title":"Clean up memory","text":"<p>Upon completion of an <code>RewardedInterstitialAd</code>, it's important to invoke the <code>destroy()</code> function before releasing your reference to it:</p> <pre><code>if _rewarded_interstitial_ad:\n    _rewarded_interstitial_ad.destroy()\n    _rewarded_interstitial_ad = null\n</code></pre> <p>This action signals to the plugin that the object is no longer in use and that the memory it occupies can be reclaimed. Neglecting to call this method can lead to memory leaks.</p>"},{"location":"ad_formats/rewarded_interstitial/#further-references","title":"Further References","text":""},{"location":"ad_formats/rewarded_interstitial/#samples","title":"Samples","text":"<ul> <li>Sample Project: A Minimal Illustration of usage of all Ad Formats</li> </ul>"},{"location":"ad_formats/banner/get_started/","title":"Get Started","text":"<p>Banner ads are rectangular advertisements, consisting of either images or text, that are integrated into an app's layout. These ads remain on the screen while users engage with the app and can automatically refresh after a designated time interval. If you're new to mobile advertising, banner ads provide an excellent starting point for your ad implementation journey.</p> <p>This guide demonstrates how to seamlessly integrate banner ads from AdMob into a Godot app. Alongside code snippets and detailed instructions, it also provides guidance on appropriately sizing banners and directs you to additional resources for further assistance.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"ad_formats/banner/get_started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> </ul>"},{"location":"ad_formats/banner/get_started/#always-test-with-test-ads","title":"Always test with test ads","text":"<p>When developing and testing your Godot apps, it's crucial to use test ads rather than live production ads. Failure to do so can result in the suspension of your AdMob account.</p> <p>The most straightforward method to load test ads is by utilizing our dedicated test ad unit ID for Android and iOS banners:</p> AndroidiOS <pre><code>ca-app-pub-3940256099942544/6300978111\n</code></pre> <pre><code>ca-app-pub-3940256099942544/2934735716\n</code></pre> <p>This particular ad unit ID has been purposefully configured to deliver test ads for every request. You can safely employ it during your coding, testing, and debugging phases. However, remember to replace this test ad unit ID with your own when you are ready to publish your app.</p> <p>For a more comprehensive understanding of how the Mobile Ads SDK's test ads function, please refer to our documentation on Test Ads.</p>"},{"location":"ad_formats/banner/get_started/#adview-example","title":"AdView example","text":"<p>The code sample below demonstrates how to utilize the AdView. In this example, you'll create an instance of an AdView, load an ad into it using an AdRequest, and enhance functionality by handling various life cycle events.</p>"},{"location":"ad_formats/banner/get_started/#create-a-adview-banner","title":"Create a AdView (banner)","text":"<p>The initial step in utilizing a banner ad is to create an instance of an AdView within a GDScript attached to a Node.</p> <pre><code>extends Node2D\n\nvar _ad_view : AdView\n\nfunc _ready():\n    #The initializate needs to be done only once, ideally at app launch.\n    MobileAds.initialize()\n\nfunc _create_ad_view() -&gt; void:\n    #free memory\n    if _ad_view:\n        destroy_ad_view()\n\n    var unit_id : String\n    if OS.get_name() == \"Android\":\n        unit_id = \"ca-app-pub-3940256099942544/6300978111\"\n    elif OS.get_name() == \"iOS\":\n        unit_id = \"ca-app-pub-3940256099942544/2934735716\"\n\n    _ad_view = AdView.new(unit_id, AdSize.BANNER, AdPosition.Values.TOP)\n</code></pre> <p>The constructor for an AdView in Godot has the following parameters:</p> <ul> <li><code>unit_id</code>: The AdMob ad unit ID from which the AdView should load ads.</li> <li><code>AdSize</code>: The AdMob ad size you wish to utilize (refer to AdView sizes for specifics).</li> <li><code>AdPosition</code>: The position at which the banner ad should be positioned. The <code>AdPosition.Values</code> enum enumerates the valid ad position values.</li> </ul> <p>Take note of the distinct ad units used based on the platform. When making ad requests on iOS, you should utilize an iOS ad unit, while for Android, you must use an Android ad unit.</p>"},{"location":"ad_formats/banner/get_started/#optional-generate-an-adview-with-a-customized-size","title":"(Optional) Generate an AdView with a customized size","text":"<p>In addition to utilizing predefined AdSize constants, you can also specify a custom size for your ad:</p> <pre><code>var ad_size := AdSize.new(200, 200)\n_ad_view := AdView.new(unit_id, ad_size, AdPosition.Values.TOP)\n</code></pre>"},{"location":"ad_formats/banner/get_started/#load-a-adview-banner","title":"Load a AdView (banner)","text":"<p>The second phase in utilizing the AdView involves crafting an AdRequest and then passing it to the <code>load_banner()</code> method.</p> <pre><code>func _on_load_banner_pressed():\n    if _ad_view == null:\n        _create_ad_view()\n    var ad_request := AdRequest.new()\n    _ad_view.load_ad(ad_request)\n</code></pre>"},{"location":"ad_formats/banner/get_started/#listen-to-adview-signals","title":"Listen to AdView signals","text":"<p>To tailor the behavior of your ad, you can connect to various events in the ad's lifecycle, such as loading, opening, closing, and more. To monitor these events, you can register a <code>AdListener</code>:</p> <pre><code>func register_ad_listener() -&gt; void:\n    if _ad_view != null:\n        var ad_listener := AdListener.new()\n\n        ad_listener.on_ad_failed_to_load = func(load_ad_error : LoadAdError) -&gt; void:\n            print(\"_on_ad_failed_to_load: \" + load_ad_error.message)\n        ad_listener.on_ad_clicked = func() -&gt; void:\n            print(\"_on_ad_clicked\")\n        ad_listener.on_ad_closed = func() -&gt; void:\n            print(\"_on_ad_closed\")\n        ad_listener.on_ad_impression = func() -&gt; void:\n            print(\"_on_ad_impression\")\n        ad_listener.on_ad_loaded = func() -&gt; void:\n            print(\"_on_ad_loaded\")\n        ad_listener.on_ad_opened = func() -&gt; void:\n            print(\"_on_ad_opened\")\n\n        _ad_view.ad_listener = ad_listener\n</code></pre>"},{"location":"ad_formats/banner/get_started/#destroy-the-adview-banner","title":"Destroy the AdView (banner)","text":"<p>Upon completion of using the AdView, remember to call Destroy() to release allocated resources and free up memory.</p> <pre><code>func destroy_ad_view() -&gt; void:\n    if _ad_view:\n        #always call this method on all AdFormats to free memory on Android/iOS\n        _ad_view.destroy()\n        _ad_view = null\n</code></pre> <p>That's all there is to it! Your app is now fully prepared to showcase banner ads from AdMob.</p>"},{"location":"ad_formats/banner/get_started/#adview-sizes","title":"AdView sizes","text":"<p>Below is a table presenting the standard banner ad sizes:</p> Size in dp (WxH) Description Availability AdSize constant 320x50 Standard Banner Phones and Tablets BANNER 320x100 Large Banner Phones and Tablets LARGE_BANNER 300x250 IAB Medium Rectangle Phones and Tablets MEDIUM_RECTANGLE 468x60 IAB Full-Size Banner Tablets FULL_BANNER 728x90 IAB Leaderboard Tablets LEADERBOARD Provided width x Adaptive height Adaptive banner Phones and Tablets N/A Screen width x 32/50/90 Smart banner Phones and Tablets N/A"},{"location":"ad_formats/banner/get_started/#further-references","title":"Further References","text":""},{"location":"ad_formats/banner/get_started/#samples","title":"Samples","text":"<ul> <li>Sample Project: A Minimal Illustration of usage of all Ad Formats</li> </ul>"},{"location":"ad_formats/banner/sizes/anchored_adaptive/","title":"Anchored adaptive","text":"<p>Adaptive banners represent the evolution of responsive ads, enhancing performance by dynamically optimizing ad size for each device. Unlike smart banners, which supported only fixed heights, adaptive banners empower you to specify the ad's width, which is then used to determine the most suitable ad size.</p> <p>To select the optimal ad size, adaptive banners rely on fixed aspect ratios instead of fixed heights. This results in banner ads that maintain a consistent proportion of the screen across various devices, offering the potential for improved performance.</p> <p>When working with adaptive banners, it's important to note that they consistently return a set size for a particular device and width. Once you've tested your layout on a specific device, you can count on the ad size remaining unchanged. However, keep in mind that the banner creative's size may vary across different devices. Therefore, we recommend that your layout accommodates potential differences in ad height. In rare instances, the complete adaptive size may not be filled, and a standard-sized creative will be centered in that space instead.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"ad_formats/banner/sizes/anchored_adaptive/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> </ul>"},{"location":"ad_formats/banner/sizes/anchored_adaptive/#implementation-notes-for-adaptive-banners-in-godot","title":"Implementation Notes for Adaptive Banners in Godot","text":"<ol> <li> <p>Width Knowledge: You must have knowledge of the width of the view where the ad will be placed. This should account for the device's width and any safe areas or cutouts that may be present.</p> </li> <li> <p>Plugin Version: Make sure you are using the latest version of the Google Mobile Ads Godot plugin. For mediation, ensure you are also using the latest version of each mediation adapter.</p> </li> <li> <p>Optimal Width Usage: Adaptive banner sizes perform best when they utilize the full available width. In most cases, this equates to the full width of the device's screen. Take into account any safe areas that may apply.</p> </li> <li> <p>Ad Sizing: The Google Mobile Ads SDK automatically sizes the banner with an optimized ad height based on the provided width when using the adaptive AdSize APIs.</p> </li> <li> <p>Adaptive Banner Sizes: You can obtain adaptive ad sizes using three functions: <code>AdSize.get_landscape_anchored_adaptive_banner_ad_size</code> for landscape, <code>AdSize.get_portrait_anchored_adaptive_banner_ad_size</code> for portrait, and <code>AdSize.get_current_orientation_anchored_adaptive_banner_ad_size</code> for the current orientation at the time of execution.</p> </li> <li> <p>Stable Sizing: The size returned for a given width on a specific device will remain constant. Therefore, once you've tested your layout on a particular device, you can be confident that the ad size will not change.</p> </li> <li> <p>Anchored Banner Height: The anchored banner height is always within certain limits. It will never exceed 15% of the device's height or fall below 50 density-independent pixels (dp).</p> </li> <li> <p>Full Width Banners: For full-width banners, you can use the <code>AdSize.FULL_WIDTH</code> constant instead of specifying a specific width.</p> </li> </ol>"},{"location":"ad_formats/banner/sizes/anchored_adaptive/#quickstart-guide","title":"Quickstart Guide","text":"<p>Follow these steps to implement a simple adaptive anchor banner in Godot:</p> <ol> <li> <p>Obtain Adaptive Ad Size:</p> <ul> <li>Get the width of the device in use in density-independent pixels (dp), or set your custom width if you don't want to use the full screen width. May <code>DisplayServer.window_get_size().x</code> be useful.</li> <li>Alternatively, set a custom width if you don't wish to use the full screen width.</li> <li>For full-width banners, use the <code>AdSize.FullWidth</code> flag.</li> <li>Utilize the appropriate static methods on the ad size class, like <code>AdSize.get_current_orientation_anchored_adaptive_banner_ad_size(width)</code>, to obtain an adaptive <code>AdSize</code> object for the current orientation.</li> </ul> </li> <li> <p>Create a AdView:</p> <ul> <li>Instantiate a <code>AdView</code> object with your ad unit ID, the adaptive size obtained in step 1, and the desired position for your ad.</li> </ul> </li> <li> <p>Ad Request Creation:</p> <ul> <li>Create an ad request object.</li> <li>Use the <code>load_ad()</code> function on your prepared ad view to load your adaptive anchor banner, just as you would with a standard banner request.</li> </ul> </li> </ol>"},{"location":"ad_formats/banner/sizes/anchored_adaptive/#sample-code-illustration","title":"Sample Code Illustration","text":"<p>Below is a script example that loads and refreshes an adaptive banner: <pre><code>extends Node2D\n\nvar _ad_view : AdView\nvar _ad_listener := AdListener.new()\n\nfunc _ready() -&gt; void:\n    var on_initialization_complete_listener := OnInitializationCompleteListener.new()\n    on_initialization_complete_listener.on_initialization_complete = func(initialization_status : InitializationStatus) -&gt; void:\n        _request_ad_view()\n    MobileAds.initialize(on_initialization_complete_listener)\n\n    _ad_listener.on_ad_failed_to_load = _on_ad_failed_to_load\n    _ad_listener.on_ad_loaded = _on_ad_loaded\n\nfunc _request_ad_view() -&gt; void:\n    var unit_id : String\n    if OS.get_name() == \"Android\":\n        unit_id = \"ca-app-pub-3940256099942544/6300978111\"\n    elif OS.get_name() == \"iOS\":\n        unit_id = \"ca-app-pub-3940256099942544/6300978111\"\n\n    if (_ad_view != null):\n        _ad_view.destroy()\n\n    var adaptive_size := AdSize.get_current_orientation_anchored_adaptive_banner_ad_size(AdSize.FULL_WIDTH) \n    _ad_view = AdView.new(unit_id, adaptive_size, AdPosition.Values.TOP)\n    _ad_view.ad_listener = _ad_listener\n\n    _ad_view.load_ad(AdRequest.new())\n\nfunc _on_ad_failed_to_load(load_ad_error : LoadAdError) -&gt; void:\n    print(\"_on_ad_failed_to_load: \" + load_ad_error.message)\n\nfunc _on_ad_loaded() -&gt; void:\n    print(\"_on_ad_loaded\")\n</code></pre></p> <p>In this context, we use functions like <code>AdSize.get_current_orientation_anchored_adaptive_banner_ad_size</code> to retrieve the size for a banner in an anchored position, aligning with the current interface orientation. To pre-load an anchored banner for a specific orientation, you can make use of the appropriate function, either <code>AdSize.get_portrait_anchored_adaptive_banner_ad_size</code> or <code>AdSize.get_landscape_anchored_adaptive_banner_ad_size</code>.</p>"},{"location":"ad_formats/banner/sizes/smart_banner/","title":"Smart Banner \u26a0\ufe0f (deprecated)","text":"<p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul> <p>Note</p> <p>Try the newer adaptive banners instead.</p> <p>To use Smart Banners, use the <code>AdSize.get_smart_banner_ad_size()</code> function for the ad size when creating a AdView. For example:</p> <pre><code># Create a Smart Banner at the top of the screen.\nvar ad_view := AdView.new(unit_id, AdSize.get_smart_banner_ad_size(), AdPosition.Values.TOP)\n</code></pre>"},{"location":"advanced_topics/targeting/","title":"Targeting","text":"<p>This guide explains how to provide targeting information to an ad request. </p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"advanced_topics/targeting/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> </ul>"},{"location":"advanced_topics/targeting/#requestconfiguration","title":"RequestConfiguration","text":"<p><code>RequestConfiguration</code> is an entity used to gather targeting details that can be globally applied through a static method within <code>MobileAds</code>. And is applied by <code>MobileAds.set_request_configuration(request_configuration)</code></p>"},{"location":"advanced_topics/targeting/#child-directed-setting","title":"Child-directed setting","text":"<p>To comply with Children's Online Privacy Protection Act (COPPA), you can set the \"tag for child-directed treatment\" option. This signifies that you want your content to be treated as child-directed for COPPA purposes. It's important to ensure that you have the authority to make this decision on behalf of the app owner. Please be aware that misusing this setting can lead to the termination of your Google account.</p> <p>As an app developer, you can indicate whether your content is child-directed when making ad requests. When you specify that your content is child-directed, Google will take steps to disable Interest-Based Advertising (IBA) and remarketing ads for that particular ad request.</p> <p>To implement this setting, you can use <code>RequestConfiguration.new().tag_for_child_directed_treatment = int</code> with the following options:</p> <ul> <li> <p>Use <code>tag_for_child_directed_treatment</code> with <code>RequestConfiguration.TagForChildDirectedTreatment.TRUE</code> to indicate that your content should be treated as child-directed for COPPA compliance. This will prevent the transmission of the Android advertising identifier (AAID). This will prevent the transmission of the Advertising Identifier, IDFA.</p> </li> <li> <p>Use <code>tag_for_child_directed_treatment</code> with <code>RequestConfiguration.TagForChildDirectedTreatment.FALSE</code> to specify that your content should not be treated as child-directed for COPPA purposes.</p> </li> <li> <p>Use <code>tag_for_child_directed_treatment</code> with <code>RequestConfiguration.TagForChildDirectedTreatment.UNSPECIFIED</code> if you do not want to specify how your content should be treated in ad requests with respect to COPPA.</p> </li> </ul> <p>The following example indicates that you want your content treated as child-directed for purposes of COPPA:</p> <pre><code>var request_configuration := RequestConfiguration.new()\nrequest_configuration.tag_for_child_directed_treatment = RequestConfiguration.TagForChildDirectedTreatment.TRUE\nMobileAds.set_request_configuration(request_configuration)\n</code></pre>"},{"location":"advanced_topics/targeting/#users-under-the-age-of-consent","title":"Users under the age of consent","text":"<p>You can configure your ad requests to receive treatment for users in the European Economic Area (EEA) who are below the age of consent. This feature is designed to assist with compliance under the General Data Protection Regulation (GDPR). It's important to note that GDPR may impose additional legal obligations, so it's advisable to consult with legal counsel and review the European Union's guidelines. Google's tools are meant to support compliance but do not replace publishers' legal responsibilities. Learn more about how the GDPR affects publishers.</p> <p>When using this feature, an ad request will contain a \"Tag For Users under the Age of Consent in Europe\" (TFUA) parameter. This parameter deactivates personalized advertising, including remarketing, for all ad requests. It also prevents requests to third-party ad vendors like ad measurement pixels and third-party ad servers.</p> <p>Similar to the child-directed settings, you can utilize the property in <code>RequestConfiguration.new()</code> class to set the TFUA parameter: <code>tag_for_under_age_of_consent = int</code>. It offers the following options:</p> <ul> <li> <p>Use <code>tag_for_under_age_of_consent</code> with <code>RequestConfiguration.TagForUnderAgeOfConsent.TRUE</code> to indicate that you want the ad request to receive treatment for users in the European Economic Area (EEA) under the age of consent. This will also prevent the transmission of the Android advertising identifier (AAID). This will also prevent the transmission of the Advertising Identifier, IDFA.</p> </li> <li> <p>Use <code>tag_for_under_age_of_consent</code> with <code>RequestConfiguration.TagForUnderAgeOfConsent.FALSE</code> to specify that you do not want the ad request to receive treatment for users in the European Economic Area (EEA) under the age of consent.</p> </li> <li> <p>Use <code>tag_for_under_age_of_consent</code> with <code>RequestConfiguration.TagForUnderAgeOfConsent.UNSPECIFIED</code> to indicate that you have not specified whether the ad request should receive treatment for users in the European Economic Area (EEA) under the age of consent.</p> </li> </ul> <p>Here's an example indicating your intention to include TFUA in your ad requests:</p> <pre><code>var request_configuration := RequestConfiguration.new()\nrequest_configuration.tag_for_under_age_of_consent = RequestConfiguration.TagForUnderAgeOfConsent.UNSPECIFIED\nMobileAds.set_request_configuration(request_configuration)\n</code></pre> <p>The tags to enable the Child-directed setting and <code>tag_for_under_age_of_consent</code> property should not both simultaneously be set to <code>true</code>. If they are, the child-directed setting takes precedence.</p>"},{"location":"advanced_topics/targeting/#ad-content-filtering","title":"Ad content filtering","text":"<p>To ensure compliance with Google Play's Inappropriate Ads Policy, which encompasses associated offers within ads, it's essential that all ads and their associated offers displayed in your app align with your app's content rating. This applies even if the content itself complies with Google Play's policies.</p> <p>Tools like the maximum ad content rating provide you with greater control over the content of ads shown to your users. You can set a maximum content rating to ensure adherence to platform policies.</p> <p>Apps can specify a maximum ad content rating for their ad requests using the <code>max_ad_content_rating</code> property. AdMob ads returned with this configuration will have a content rating that matches or falls below the specified level. The available values for this network extra are based on digital content label classifications and must be one of the following strings:</p> <ul> <li><code>RequestConfiguration.MAX_AD_CONTENT_RATING_G</code></li> <li><code>RequestConfiguration.MAX_AD_CONTENT_RATING_PG</code></li> <li><code>RequestConfiguration.MAX_AD_CONTENT_RATING_T</code></li> <li><code>RequestConfiguration.MAX_AD_CONTENT_RATING_MA</code></li> </ul> <p>The following code demonstrates how to configure a <code>RequestConfiguration</code> object to specify that ad content returned should not exceed a digital content label designation of <code>G</code>:</p> <pre><code>var request_configuration := RequestConfiguration.new()\nrequest_configuration.max_ad_content_rating = RequestConfiguration.MAX_AD_CONTENT_RATING_G\nMobileAds.set_request_configuration(request_configuration)\n</code></pre> <p>Learn more about:</p> <ul> <li>Setting the maximum content rating for each ad request</li> <li>Setting the maximum ad content rating for an app or account</li> </ul>"},{"location":"mediate/get_started/","title":"Get started","text":"<p>AdMob mediation is a valuable feature that allows you to deliver ads to your applications from various sources. These sources encompass the AdMob Network, third-party ad networks, and AdMob campaigns. The primary goal of AdMob mediation is to optimize your fill rate and enhance your monetization efforts. It achieves this by directing ad requests to multiple networks, ensuring that your app utilizes the most suitable network available to serve ads. This approach is exemplified through a case study.</p> <p>This comprehensive guide serves as your all-inclusive resource for integrating mediation into your AdMob app. It encompasses both bidding and waterfall integration methods, providing you with a complete reference for optimizing your ad serving strategy.</p> <p>Info</p> <p>Crucial Note: Before proceeding with mediation configuration, it's essential to ensure that you possess the required account permissions. These permissions encompass access to inventory management, app access, and privacy and messaging features. For further details, please refer to the New User Roles article.</p> <ul> <li>Prior to integrating mediation for a specific ad format, you must first integrate that ad format into your app. These ad formats include:<ul> <li>Banner Ads</li> <li>Interstitial Ads</li> <li>Rewarded Ads</li> <li>Rewarded Interstitial Ads</li> </ul> </li> </ul> <p>If you are new to mediation, it's advisable to review the Overview of AdMob mediation for a better understanding of the concept.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"mediate/get_started/#initialize-the-mobile-ads-sdk","title":"Initialize the Mobile Ads SDK","text":"<p>The quick start guide provides instructions on how to initialize the Mobile Ads SDK. During this initialization process, mediation and bidding adapters are also initialized. It's crucial to wait for this initialization to complete before loading ads to ensure that every ad network fully participates in the first ad request.</p> <p>The following sample code demonstrates how you can verify the initialization status of each adapter before initiating an ad request.</p> <pre><code>extends Control\n\nfunc _ready() -&gt; void:\n    var on_initialization_complete_listener := OnInitializationCompleteListener.new()\n    on_initialization_complete_listener.on_initialization_complete = _on_initialization_complete\n    MobileAds.initialize(on_initialization_complete_listener)\n\nfunc _on_initialization_complete(initialization_status : InitializationStatus) -&gt; void:\n    print(\"MobileAds initialization complete\")\n    for key in initialization_status.adapter_status_map:\n        var adapterStatus : AdapterStatus = initialization_status.adapter_status_map[key]\n        prints(\n            \"Key:\", key, \n            \"Latency:\", adapterStatus.latency, \n            \"Initialization Status:\", adapterStatus.initialization_status, \n            \"Description:\", adapterStatus.description\n        )\n</code></pre>"},{"location":"mediate/get_started/#banner-ads-mediation","title":"Banner ads mediation","text":"<p>When utilizing banner ads in AdMob mediation, it's essential to disable refresh settings in all third-party ad networks' user interfaces for the banner ad units you're using in mediation. This action prevents the occurrence of double refreshes, as AdMob also triggers a refresh based on your banner ad unit's predefined refresh rate.</p>"},{"location":"mediate/get_started/#rewarded-ads-mediation","title":"Rewarded ads mediation","text":"<p>We strongly advise you to customize all default reward values by configuring reward values within the AdMob UI. To accomplish this, select the Apply to all networks in Mediation groups option to ensure that the reward remains uniform across all networks. Keep in mind that certain ad networks may not provide a reward value or type. By overriding the reward value, you guarantee a consistent reward, regardless of the ad network responsible for serving the ad. </p> <p>For more information on setting reward values in the AdMob UI, refer to create a rewarded ad unit.</p> <p>For comprehensive details on how to set reward values within the AdMob UI, please consult the Create a Rewarded Ad Unit documentation.</p>"},{"location":"mediate/get_started/#ccpa-and-gdpr","title":"CCPA and GDPR","text":"<p>Warning</p> <p>Critical Note: Before proceeding with the configuration for EU Consent, GDPR, CCPA, and User Messaging Platform, it is crucial to ensure that you have the necessary Account Management permission. These permissions are essential for managing privacy-related settings. To obtain more information, please refer to the New User Roles article.</p> <p>If your app needs to adhere to the California Consumer Privacy Act (CCPA) or the General Data Protection Regulation (GDPR), please adhere to the steps outlined in the CCPA settings or GDPR settings to include your mediation partners in AdMob Privacy &amp; Messaging's CCPA or GDPR ad partners list. Failing to do so may result in your partners being unable to serve ads on your app.</p> <p>To acquire further insights, explore the process of enabling CCPA restricted data processing and obtaining GDPR consent using the Google User Messaging Platform (UMP) SDK.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/","title":"Integrate AdColony with Mediation","text":"<p>This guide demonstrates how to employ the Google Mobile Ads SDK to load and showcase ads from AdColony through mediation, encompassing both bidding and waterfall integration approaches. It elucidates the process of incorporating AdColony into an ad unit's mediation configuration and integrating the AdColony SDK and adapter into a Godot app.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"mediate/integrate_partner_networks/ad_colony/#supported-integrations-and-ad-formats","title":"Supported integrations and ad formats","text":"<p>The AdMob mediation adapter for AdColony has the following capabilities:</p> Integration Bidding \u2705 Waterfall \u2705 Formats Banner \u2705 Interstitial \u2705 Rewarded \u2705"},{"location":"mediate/integrate_partner_networks/ad_colony/#prerequisites","title":"Prerequisites","text":"<ul> <li>Godot 4.1+</li> <li>Latest Godot AdMob Plugin </li> <li>Android deploy:<ul> <li>Android API level 19 or higher</li> <li>Latest Godot AdMob Android Plugin</li> </ul> </li> <li>iOS deploy:<ul> <li>iOS deployment target of 11.0 or higher</li> <li>Latest Godot AdMob iOS Plugin</li> </ul> </li> <li>Complete the Get started guide</li> <li>Complete the mediation Get started guide</li> </ul>"},{"location":"mediate/integrate_partner_networks/ad_colony/#step-1-set-up-adcolony","title":"Step 1: Set up AdColony:","text":"<p>We recommend following the tutorial for Android or iOS, as it will be the same for both.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/#step-2-configure-mediation-settings-for-your-admob-ad-unit","title":"Step 2: Configure mediation settings for your AdMob ad unit","text":"<p>We recommend following the tutorial for Android or iOS, as it will be the same for both.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/#step-3-import-the-adcolony-plugin","title":"Step 3: Import the AdColony plugin","text":"<ol> <li>Download the plugin for Android and/or iOS.</li> <li>Extract the <code>.zip</code> file. Inside, you will find an <code>adcolony</code> folder.</li> <li> <p>Copy the contents of the <code>adcolony</code> folder and paste the copied contents into the Android and/or iOS plugin folder.</p> AndroidiOS <p></p> <p></p> </li> <li> <p>When export make sure to mark <code>Ad Mob</code> and <code>Ad Mob Ad Colony</code></p> AndroidiOS <p></p> <p></p> </li> </ol>"},{"location":"mediate/integrate_partner_networks/ad_colony/#step-4-additional-code-required","title":"Step 4: Additional code required","text":"AndroidiOS <p>No additional code is required for AdColony integration.</p> <p>SKAdNetwork integration</p> <p>Follow AdColony's documentation to add the SKAdNetwork identifiers to your project's <code>Info.plist</code> file.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/#step-5-test-your-implementation","title":"Step 5: Test your implementation","text":"<p>We recommend following the tutorial for Android or iOS, as it will be the same for both.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/#optional-steps","title":"Optional steps","text":"<p>Info</p> <p>Important: Please verify you have Account Management permission to complete configuration for EU Consent and GDPR, CCPA, and User Messaging Platform. To learn more please see the following new user roles article.</p> AndroidiOS <p>Permissions</p> <p>For optimal performance, AdColony recommends including the following optional permissions in the <code>AndroidManifest.xml</code> file located under the <code>res://android/build</code> directory of your Godot project.</p> <pre><code>&lt;uses-permission android:name=\"android.permission.VIBRATE\" /&gt;\n</code></pre> <p>No additional code is required for AdColony integration.</p> <p>Network-specific parameters The AdColony mediation package supports additional configuration and request parameters, which can be passed to the adapter using the <code>AdColonyMediationExtras</code> and <code>AdColonyAppOptions</code> classes.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/#adcolonymediationextras","title":"AdColonyMediationExtras","text":"<ul> <li><code>show_post_popup : bool</code>: Sets whether or not to show a popup before displaying an ad. Set to false if you don't want to show a popup before ads display.</li> <li><code>show_pre_popup : bool</code>: Sets whether or not to show a popup after displaying an ad. Set to false if you don't want to show a popup after ads display.</li> </ul>"},{"location":"mediate/integrate_partner_networks/ad_colony/#adcolonyappoptions","title":"AdColonyAppOptions","text":"<ul> <li><code>set_user_id(string)</code>: Sets the User ID for the AdColony SDK, providing further analytics to the AdColony Ad Server.</li> <li><code>set_test_mode(bool)</code>: Sets whether or not to enable test mode for the AdColony SDK.</li> </ul> <p>Here's a code example of how to set these configurations and ad request parameters:</p> <pre><code># Using AdColonyAppOptions\nvar adcolony_app_options := AdColonyAppOptions.new()\nadcolony_app_options.set_user_id(\"your_user_id\")\nadcolony_app_options.set_test_mode(true)\n\n# Using AdColonyMediationExtras\nvar ad_request := AdRequest.new()\n\nvar ad_colony_mediation_extras := AdColonyMediationExtras.new()\nad_colony_mediation_extras.show_post_popup = false\nad_colony_mediation_extras.show_pre_popup = true\n\nad_request.mediation_extras.append(ad_colony_mediation_extras)\n</code></pre>"},{"location":"mediate/integrate_partner_networks/ad_colony/#eu-consent-and-gdpr","title":"EU consent and GDPR","text":"<p>Under the Google EU User Consent Policy, it's mandatory to provide certain disclosures and obtain consents from users within the European Economic Area (EEA) regarding the utilization of device identifiers and personal data. This policy aligns with the EU ePrivacy Directive and the General Data Protection Regulation (GDPR). When seeking consent, you must explicitly identify each ad network within your mediation chain that may collect, receive, or utilize personal data. Additionally, you should furnish information about how each network intends to use this data. Importantly, Google currently cannot automatically transmit the user's consent choice to these networks.</p> <p>The AdColony plugin offers the <code>AdColonyAppOptions</code> class, enabling you to customize parameters sent to AdColony's SDK. Among these options, two are pertinent to GDPR compliance: <code>set_privacy_framework_required()</code> and <code>set_privacy_consent_string()</code>. Below is a sample code snippet illustrating how to convey consent information to the AdColony adapter. These settings must be configured before initializing the Google Mobile Ads SDK to ensure seamless forwarding to AdColony's SDK.</p> <pre><code>var adcolony_app_options := AdColonyAppOptions.new()\n\n# Set GDPR consent parameters\nadcolony_app_options.set_privacy_framework_required(AdColonyAppOptions.GDPR, true)\nadcolony_app_options.set_privacy_consent_string(AdColonyAppOptions.GDPR, \"myPrivacyConsentString\")\n</code></pre> <p>Check the detailed information about AdColony's consumer privacy policies and implementation guidelines related to privacy laws.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/#add-adcolony-to-gdpr-ad-partners-list","title":"Add AdColony to GDPR ad partners list","text":"<p>Follow the steps in GDPR settings to add AdColony to the GDPR ad partners list in the AdMob UI.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/#ccpa","title":"CCPA","text":"<p>The California Consumer Privacy Act (CCPA) mandates that California state residents have the right to opt out of the \"sale\" of their \"personal information,\" as defined by the law. This opt-out option should be prominently displayed through a \"Do Not Sell My Personal Information\" link on the homepage of the party engaging in the sale.</p> <p>The CCPA preparation guide offers a feature to enable restricted data processing for Google ad serving. However, Google cannot apply this setting to every ad network within your mediation chain. Therefore, it is essential to identify each ad network in your mediation chain that might be involved in the sale of personal information and follow the specific guidance provided by each of those networks to ensure CCPA compliance.</p> <p>The AdColony plugin offers the <code>AdColonyAppOptions</code> class, enabling you to customize parameters sent to AdColony's SDK. Among these options, two are pertinent to CCPA compliance: <code>set_privacy_framework_required()</code> and <code>set_privacy_consent_string()</code>. Below is a sample code snippet illustrating how to convey consent information to the AdColony adapter. These settings must be configured before initializing the Google Mobile Ads SDK to ensure seamless forwarding to AdColony's SDK.</p> <pre><code>var adcolony_app_options := AdColonyAppOptions.new()\n\n# Set CCPA consent parameters\nadcolony_app_options.set_privacy_framework_required(AdColonyAppOptions.CCPA, true)\nadcolony_app_options.set_privacy_consent_string(AdColonyAppOptions.CCPA, \"myPrivacyConsentString\")\n</code></pre> <p>Check the detailed information about AdColony's consumer privacy policies and implementation guidelines related to privacy laws.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/#add-adcolony-to-ccpa-ad-partners-list","title":"Add AdColony to CCPA ad partners list","text":"<p>Follow the steps in CCPA settings to add AdColony to the CCPA ad partners list in the AdMob UI.</p>"},{"location":"mediate/integrate_partner_networks/ad_colony/#error-codes","title":"Error codes","text":"<p>If the AdColony adapter fails to receive an ad, publishers can check the underlying error from the ad response using <code>ResponseInfo</code> under the following classes:</p> AndroidiOS <pre><code>com.jirbo.adcolony.AdColonyAdapter\ncom.google.ads.mediation.adcolony.AdColonyMediationAdapter\n</code></pre> <pre><code>GADMAdapterAdColony\nGADMediationAdapterAdColony\n</code></pre> <p>Here are the codes and accompanying messages thrown by the AdColony adapter when an ad fails to load:</p> AndroidiOS Error code Reason 100 The AdColony SDK returned an error. 101 Invalid server parameters (e.g. missing Zone ID). 102 An ad was already requested for the same Zone ID. 103 The AdColony SDK returned an initialization error. 104 The requested banner size does not map to a valid AdColony ad size. 105 Presentation error due to ad not loaded. 106 Context used to initialize the AdColony SDK was not an Activity instance. Error code Reason 0 - 3 AdColony SDK returned an error. See documentation for more details. 101 Invalid server parameters (e.g. missing Zone ID). 102 Root view controller presenting the ad is nil. 103 The AdColony SDK returned an initialization error. 104 The AdColony SDK does not support being configured twice within a five second period. 105 Failed to show ad. 106 Zone used for rewarded is not a rewarded zone on AdColony portal."},{"location":"mediate/integrate_partner_networks/meta/","title":"Integrate Meta Audience Network with bidding","text":"<p>Info</p> <p>Important: Facebook Audience Network is now Meta Audience Network. See Meta's announcement for more information.</p> <p>This guide explains how to utilize the Google Mobile Ads SDK for loading and presenting ads from the Meta Audience Network through mediation, with a focus on bidding integrations. It provides instructions on integrating the Meta Audience Network into the mediation configuration of a Godot app and integrating the Meta Audience Network SDK and adapter into your Godot app.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"mediate/integrate_partner_networks/meta/#supported-integrations-and-ad-formats","title":"Supported integrations and ad formats","text":"<p>The AdMob mediation adapter for Meta Audience Network has the following capabilities:</p> Integration Bidding \u2705 Waterfall <sup>1</sup> \u274c Formats Banner \u2705 Interstitial \u2705 Rewarded \u2705"},{"location":"mediate/integrate_partner_networks/meta/#prerequisites","title":"Prerequisites","text":"<ul> <li>Godot 4.1+</li> <li>Latest Godot AdMob Plugin </li> <li>Android deploy:<ul> <li>Android API level 19 or higher</li> <li>Latest Godot AdMob Android Plugin</li> </ul> </li> <li>iOS deploy:<ul> <li>iOS deployment target of 11.0 or higher</li> <li>Latest Godot AdMob iOS Plugin</li> </ul> </li> <li>Complete the Get started guide</li> <li>Complete the mediation Get started guide</li> </ul>"},{"location":"mediate/integrate_partner_networks/meta/#step-1-set-up-meta-audience-network","title":"Step 1: Set up Meta Audience Network","text":"<p>We recommend following the tutorial for Android or iOS, as it will be the same for both.</p>"},{"location":"mediate/integrate_partner_networks/meta/#step-2-configure-mediation-settings-for-your-admob-ad-unit","title":"Step 2: Configure mediation settings for your AdMob ad unit","text":"<p>We recommend following the tutorial for Android or iOS, as it will be the same for both.</p>"},{"location":"mediate/integrate_partner_networks/meta/#step-3-import-the-meta-audience-network-plugin","title":"Step 3: Import the Meta Audience Network plugin","text":"<ol> <li>Download the plugin for Android and/or iOS.</li> <li>Extract the <code>.zip</code> file. Inside, you will find an <code>meta</code> folder.</li> <li> <p>Copy the contents of the <code>meta</code> folder and paste the copied contents into the Android and/or iOS plugin folder.</p> AndroidiOS <p></p> <p></p> </li> <li> <p>When export make sure to mark <code>Ad Mob</code> and <code>Ad Mob Meta</code></p> AndroidiOS <p></p> <p></p> </li> </ol>"},{"location":"mediate/integrate_partner_networks/meta/#step-4-additional-code-required","title":"Step 4: Additional code required","text":"AndroidiOS <p>No additional code is required for Meta Audience Network integration.</p> <p>SKAdNetwork integration</p> <p>Follow Meta Audience Network's documentation to add the SKAdNetwork identifiers to your project's <code>Info.plist</code> file.</p> <p>Compile errors</p> <p>You must follow the steps below to add Swift paths to your target's Build Settings to prevent compile errors.</p> <p>Add the following paths to the target's Build Settings under Library Search Paths:</p> <pre><code>$(TOOLCHAIN_DIR)/usr/lib/swift/$(PLATFORM_NAME)\n$(SDKROOT)/usr/lib/swift\n</code></pre> <p>Add the following path to the target's Build Settings under Runpath Search Paths: <pre><code>/usr/lib/swift\n</code></pre></p> <p>Read more about: https://developers.google.com/admob/ios/mediation/meta#step_4_additional_code_required</p> <p>Advertising tracking enabled</p> <p>If you are building for iOS 14 or later, Meta Audience Network requires that you explicitly set their Advertising Tracking Enabled flag using the following code:</p> <p>Info</p> <p>Important Point: You need to set this flag prior to initializing the Mobile Ads SDK.</p> <pre><code>if OS.get_name() == \"iOS\":\n    #FBAdSettings is available only for iOS, Google didn't put this method on Android SDK\n    FBAdSettings.set_advertiser_tracking_enabled(true)\n</code></pre>"},{"location":"mediate/integrate_partner_networks/meta/#step-5-test-your-implementation","title":"Step 5: Test your implementation","text":"<p>We recommend following the tutorial for Android or iOS, as it will be the same for both.</p>"},{"location":"mediate/integrate_partner_networks/meta/#optional-steps","title":"Optional steps","text":"<p>Info</p> <p>Important: Please verify you have Account Management permission to complete configuration for EU Consent and GDPR, CCPA, and User Messaging Platform. To learn more please see the following new user roles article.</p>"},{"location":"mediate/integrate_partner_networks/meta/#eu-consent-and-gdpr","title":"EU consent and GDPR","text":"<p>Under the Google EU User Consent Policy, it's mandatory to provide certain disclosures and obtain consents from users within the European Economic Area (EEA) regarding the utilization of device identifiers and personal data. This policy aligns with the EU ePrivacy Directive and the General Data Protection Regulation (GDPR). When seeking consent, you must explicitly identify each ad network within your mediation chain that may collect, receive, or utilize personal data. Additionally, you should furnish information about how each network intends to use this data. Importantly, Google currently cannot automatically transmit the user's consent choice to these networks.</p> <p>Please review Meta's guidance for information about GDPR and Meta advertising.</p>"},{"location":"mediate/integrate_partner_networks/meta/#add-facebook-to-gdpr-ad-partners-list","title":"Add Facebook to GDPR ad partners list","text":"<p>Follow the steps in GDPR settings to add Facebook to the GDPR ad partners list in the AdMob UI.</p>"},{"location":"mediate/integrate_partner_networks/meta/#ccpa","title":"CCPA","text":"<p>The California Consumer Privacy Act (CCPA) mandates that California state residents have the right to opt out of the \"sale\" of their \"personal information,\" as defined by the law. This opt-out option should be prominently displayed through a \"Do Not Sell My Personal Information\" link on the homepage of the party engaging in the sale.</p> <p>The CCPA preparation guide offers a feature to enable restricted data processing for Google ad serving. However, Google cannot apply this setting to every ad network within your mediation chain. Therefore, it is essential to identify each ad network in your mediation chain that might be involved in the sale of personal information and follow the specific guidance provided by each of those networks to ensure CCPA compliance.</p> <p>Please review Meta's documentation for data processing options for users in California.</p>"},{"location":"mediate/integrate_partner_networks/meta/#add-facebook-to-ccpa-ad-partners-list","title":"Add Facebook to CCPA ad partners list","text":"<p>Follow the steps in CCPA settings to add Facebook to the CCPA ad partners list in the AdMob UI.</p>"},{"location":"mediate/integrate_partner_networks/meta/#caching","title":"Caching","text":"AndroidiOS <p>Android 9:</p> <p>Starting with Android 9 (API level 28), cleartext support is disabled by default, which will affect the functionality of media caching of the Meta Audience Network SDK and could affect user experience and ads revenue. Follow Meta's documentation to update the network security configuration in your app.</p> <p>Not applicable.</p>"},{"location":"mediate/integrate_partner_networks/meta/#error-codes","title":"Error codes","text":"<p>If the adapter fails to receive an ad from Audience Network, publishers can check the underlying error from the ad response using <code>ResponseInfo</code> under the following classes:</p> AndroidiOS <pre><code>com.google.ads.mediation.facebook.FacebookAdapter\ncom.google.ads.mediation.facebook.FacebookMediationAdapter\n</code></pre> <pre><code>GADMAdapterFacebook\nGADMediationAdapterFacebook\n</code></pre> <p>Here are the codes and accompanying messages thrown by the Meta Audience Network adapter when an ad fails to load:</p> AndroidiOS Error code Reason 101 Invalid server parameters (e.g. missing Placement ID). 102 The requested ad size does not match a Meta Audience Network supported banner size. 103 The publisher must request ads with an Activity context. 104 The Meta Audience Network SDK failed to initialize. 105 The publisher did not request for Unified native ads. 106 The native ad loaded is a different object than the one expected. 107 The Context object used is invalid. 108 The loaded ad is missing the required native ad assets. 109 Failed to create a native ad from the bid payload. 110 The Meta Audience Network SDK failed to present their interstitial/rewarded ad. 111 Exception thrown when creating a Meta Audience Network AdView object. 1000-9999 The Meta Audience Network returned an SDK-specific error. See Meta Audience Network's documentation for more details. Error code Reason 101 Invalid server parameters (e.g. missing Placement ID). 102 The requested ad size does not match a Meta Audience Network supported banner size. 103 The Meta Audience Network ad object failed to initialize. 104 The Meta Audience Network SDK failed to present their interstitial/rewarded ad. 105 Root view controller of the banner ad is nil. 106 The Meta Audience Network SDK failed to initialize. 1000-9999 The Meta Audience Network returned an SDK-specific error. See Meta Audience Network's documentation for more details. <ol> <li> <p>Meta Audience Network became bidding only in 2021.\u00a0\u21a9</p> </li> </ol>"},{"location":"mediate/integrate_partner_networks/vungle/","title":"Integrate Liftoff Monetize (Vungle) with Mediation","text":"<p>Info</p> <p>Note: Vungle is now Liftoff Monetize.</p> <p>This guide explains how to utilize the Google Mobile Ads SDK for loading and presenting ads from Liftoff Monetize through mediation, with comprehensive coverage of both bidding and waterfall integrations. It provides instructions on integrating Liftoff Monetize into the mediation configuration of a Godot app and integrating the Vungle SDK and adapter into your Godot app.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"mediate/integrate_partner_networks/vungle/#supported-integrations-and-ad-formats","title":"Supported integrations and ad formats","text":"<p>The AdMob mediation adapter for AdColony has the following capabilities:</p> Integration Bidding \u2705 Waterfall \u2705 Formats Banner <sup>1</sup> Interstitial \u2705 Rewarded \u2705 Rewarded Interstitial <sup>1</sup>, <sup>2</sup>"},{"location":"mediate/integrate_partner_networks/vungle/#prerequisites","title":"Prerequisites","text":"<ul> <li>Godot 4.1+</li> <li>Latest Godot AdMob Plugin </li> <li>Android deploy:<ul> <li>Android API level 19 or higher</li> <li>Latest Godot AdMob Android Plugin</li> </ul> </li> <li>iOS deploy:<ul> <li>iOS deployment target of 11.0 or higher</li> <li>Latest Godot AdMob iOS Plugin</li> </ul> </li> <li>Complete the Get started guide</li> <li>Complete the mediation Get started guide</li> </ul>"},{"location":"mediate/integrate_partner_networks/vungle/#limitations","title":"Limitations","text":"<ul> <li>Liftoff Monetize does not support loading multiple ads using the same Placement Reference ID.<ul> <li>The Vungle adapter gracefully fails the 2nd request if another request for that placement is loading or waiting to be shown.</li> </ul> </li> <li>Liftoff Monetize only supports loading 1 banner ad at a time.<ul> <li>The Vungle adapter gracefully fails subsequent banner requests if a banner ad is already loaded.</li> </ul> </li> </ul>"},{"location":"mediate/integrate_partner_networks/vungle/#step-1-set-up-liftoff-monetize","title":"Step 1: Set up Liftoff Monetize","text":"<p>We recommend following the tutorial for Android or iOS, as it will be the same for both.</p>"},{"location":"mediate/integrate_partner_networks/vungle/#step-2-configure-mediation-settings-for-your-admob-ad-unit","title":"Step 2: Configure mediation settings for your AdMob ad unit","text":"<p>We recommend following the tutorial for Android or iOS, as it will be the same for both.</p>"},{"location":"mediate/integrate_partner_networks/vungle/#step-3-import-the-vungle-sdk-plugin","title":"Step 3: Import the Vungle SDK plugin","text":"<ol> <li>Download the plugin for Android and/or iOS.</li> <li>Extract the <code>.zip</code> file. Inside, you will find an <code>vungle</code> folder.</li> <li> <p>Copy the contents of the <code>vungle</code> folder and paste the copied contents into the Android and/or iOS plugin folder.</p> AndroidiOS <p></p> <p></p> </li> <li> <p>When export make sure to mark <code>Ad Mob</code> and <code>Ad Mob vungle</code></p> AndroidiOS <p></p> <p></p> </li> </ol>"},{"location":"mediate/integrate_partner_networks/vungle/#step-4-additional-code-required","title":"Step 4: Additional code required","text":"<p>Liftoff Monetize necessitates a list of all placements that will be employed in your Godot app to be conveyed to their SDK. You can furnish this list of placements to the adapter using the <code>VungleInterstitialMediationExtras</code> and <code>VungleRewardedVideoMediationExtras</code> classes. The subsequent code examples illustrate how to employ these classes.</p> InterstitialRewarded <pre><code>var vungle_mediation_extras := VungleInterstitialMediationExtras.new()\n\nif OS.get_name() == \"iOS\":\n    vungle_mediation_extras.all_placements = [\"ios_placement1\", \"ios_placement2\"]\nelif OS.get_name() == \"Android\":\n    vungle_mediation_extras.all_placements = [\"android_placement1\", \"android_placement2\"]\n\nvar ad_request := AdRequest.new()\nad_request.mediation_extras.append(vungle_mediation_extras)\n</code></pre> <pre><code>var vungle_mediation_extras := VungleRewardedMediationExtras.new()\n\nif OS.get_name() == \"iOS\":\n    vungle_mediation_extras.all_placements = [\"ios_placement1\", \"ios_placement2\"]\nelif OS.get_name() == \"Android\":\n    vungle_mediation_extras.all_placements = [\"android_placement1\", \"android_placement2\"]\n\nvar ad_request := AdRequest.new()\nad_request.mediation_extras.append(vungle_mediation_extras)\n</code></pre> AndroidiOS <p>No additional code is required for Liftoff Monetize integration.</p> <p>SKAdNetwork integration</p> <p>Follow Liftoff Monetize's documentation to add the SKAdNetwork identifiers to your project's <code>Info.plist</code> file.</p>"},{"location":"mediate/integrate_partner_networks/vungle/#step-5-test-your-implementation","title":"Step 5: Test your implementation","text":"<p>We recommend following the tutorial for Android or iOS, as it will be the same for both.</p>"},{"location":"mediate/integrate_partner_networks/vungle/#optional-steps","title":"Optional steps","text":"<p>Info</p> <p>Important: Please verify you have Account Management permission to complete configuration for EU Consent and GDPR, CCPA, and User Messaging Platform. To learn more please see the following new user roles article.</p>"},{"location":"mediate/integrate_partner_networks/vungle/#eu-consent-and-gdpr","title":"EU consent and GDPR","text":"<p>Under the Google EU User Consent Policy, it's mandatory to provide certain disclosures and obtain consents from users within the European Economic Area (EEA) regarding the utilization of device identifiers and personal data. This policy aligns with the EU ePrivacy Directive and the General Data Protection Regulation (GDPR). When seeking consent, you must explicitly identify each ad network within your mediation chain that may collect, receive, or utilize personal data. Additionally, you should furnish information about how each network intends to use this data. Importantly, Google currently cannot automatically transmit the user's consent choice to these networks.</p> <p>The following sample code shows how to pass this consent information to the Vungle SDK. If you choose to call this method, it is recommended that you do so prior to requesting ads through the Google Mobile Ads SDK.</p> <pre><code>Vungle.update_consent_status(Vungle.Consent.OPTED_IN, \"1.0.0\")\n</code></pre> <p>See GDPR recommended implementation instructions for more details and the values that can be provided in the method.</p>"},{"location":"mediate/integrate_partner_networks/vungle/#add-liftoff-to-gdpr-ad-partners-list","title":"Add Liftoff to GDPR ad partners list","text":"<p>Follow the steps in GDPR settings to add Liftoff to the GDPR ad partners list in the AdMob UI.</p>"},{"location":"mediate/integrate_partner_networks/vungle/#ccpa","title":"CCPA","text":"<p>The California Consumer Privacy Act (CCPA) mandates that California state residents have the right to opt out of the \"sale\" of their \"personal information,\" as defined by the law. This opt-out option should be prominently displayed through a \"Do Not Sell My Personal Information\" link on the homepage of the party engaging in the sale.</p> <p>The CCPA preparation guide offers a feature to enable restricted data processing for Google ad serving. However, Google cannot apply this setting to every ad network within your mediation chain. Therefore, it is essential to identify each ad network in your mediation chain that might be involved in the sale of personal information and follow the specific guidance provided by each of those networks to ensure CCPA compliance.</p> <p>The following sample code shows how to pass this consent information to the Vungle SDK. If you choose to call this method, it is recommended that you do so prior to requesting ads through the Google Mobile Ads SDK.</p> <pre><code>Vungle.update_ccpa_status(Vungle.Consent.OPTED_IN)\n</code></pre>"},{"location":"mediate/integrate_partner_networks/vungle/#add-liftoff-to-ccpa-ad-partners-list","title":"Add Liftoff to CCPA ad partners list","text":"<p>Follow the steps in CCPA settings to add Liftoff to the CCPA ad partners list in the AdMob UI.</p>"},{"location":"mediate/integrate_partner_networks/vungle/#network-specific-parameters","title":"Network-specific parameters","text":"<p>The Vungle adapter for Godot supports an additional request parameter that can be conveyed to the adapter using either the <code>VungleRewardedMediationExtras</code> or <code>VungleInterstitialMediationExtras</code> class, depending on the ad format you are implementing. These classes include the following properties:</p> <ul> <li> <p><code>sound_enabled</code>: Determines whether sound should be enabled when playing video ads.</p> </li> <li> <p><code>user_id</code>: A string representing the Incentivized User ID for Godot's Liftoff Monetize integration.</p> </li> <li> <p><code>all_placements</code>: An array comprising all Placement IDs within the app (this is not required for apps employing Vungle SDK 6.2.0 or higher).</p> </li> </ul> <p>For iOS, you can simply use the <code>VungleAdNetworkExtras</code> class.</p> <p>Here's a code example of how to create an ad request that sets these parameters:</p> InterstitialRewarded <pre><code>var vungle_mediation_extras := VungleInterstitialMediationExtras.new()\n\nif OS.get_name() == \"iOS\":\n    vungle_mediation_extras.all_placements = [\"ios_placement1\", \"ios_placement2\"]\n    vungle_mediation_extras.sound_enabled = true\n    vungle_mediation_extras.user_id = \"ios_user_id\"\nelif OS.get_name() == \"Android\":\n    vungle_mediation_extras.all_placements = [\"android_placement1\", \"android_placement2\"]\n    vungle_mediation_extras.sound_enabled = true\n    vungle_mediation_extras.user_id = \"android_user_id\"\n\nvar ad_request := AdRequest.new()\nad_request.mediation_extras.append(vungle_mediation_extras)\n</code></pre> <pre><code>var vungle_mediation_extras := VungleRewardedMediationExtras.new()\n\nif OS.get_name() == \"iOS\":\n    vungle_mediation_extras.all_placements = [\"ios_placement1\", \"ios_placement2\"]\n    vungle_mediation_extras.sound_enabled = true\n    vungle_mediation_extras.user_id = \"ios_user_id\"\nelif OS.get_name() == \"Android\":\n    vungle_mediation_extras.all_placements = [\"android_placement1\", \"android_placement2\"]\n    vungle_mediation_extras.sound_enabled = true\n    vungle_mediation_extras.user_id = \"android_user_id\"\n\nvar ad_request := AdRequest.new()\nad_request.mediation_extras.append(vungle_mediation_extras)\n</code></pre>"},{"location":"mediate/integrate_partner_networks/vungle/#error-codes","title":"Error codes","text":"<p>If the adapter fails to receive an ad from Audience Network, publishers can check the underlying error from the ad response using <code>ResponseInfo</code> under the following classes:</p> AndroidiOS Format Class name Banner com.vungle.mediation.VungleInterstitialAdapter Interstitial com.vungle.mediation.VungleInterstitialAdapter Rewarded com.vungle.mediation.VungleAdapter Format Class name Banner GADMAdapterVungleInterstitial Interstitial GADMAdapterVungleInterstitial Rewarded GADMAdapterVungleRewardBasedVideoAd <p>Here are the codes and accompanying messages thrown by the Liftoff Monetize adapter when an ad fails to load:</p> AndroidiOS Error code Domain Reason 0-100 com.vungle.warren Vungle SDK returned an error. See document for more details. 101 com.google.ads.mediation.vungle Invalid server parameters (e.g. app ID or placement ID). 102 com.google.ads.mediation.vungle The requested banner size does not map to a valid Liftoff Monetize ad size. 103 com.google.ads.mediation.vungle Liftoff Monetize requires an Activity context to request ads. 104 com.google.ads.mediation.vungle The Vungle SDK cannot load multiple ads for the same placement ID. 105 com.google.ads.mediation.vungle The Vungle SDK failed to initialize. 106 com.google.ads.mediation.vungle Vungle SDK returned a successful load callback, but Banners.getBanner() or Vungle.getNativeAd() returned null. 107 com.google.ads.mediation.vungle Vungle SDK is not ready to play the ad. Error code Domain Reason 1-100 Sent by Vungle SDK Vungle SDK returned an error. See code for more details. 101 com.google.mediation.vungle Liftoff Monetize server parameters configured in the AdMob UI are missing/invalid. 102 com.google.mediation.vungle An ad is already loaded for this network configuration. Vungle SDK cannot load a second ad for the same placement ID. 103 com.google.mediation.vungle The requested ad size does not match a Liftoff Monetize supported banner size. 104 com.google.mediation.vungle Vungle SDK could not render the banner ad. 105 com.google.mediation.vungle Vungle SDK only supports loading 1 banner ad at a time, regardless of placement ID. 106 com.google.mediation.vungle Vungle SDK sent a callback saying the ad is not playable. <ol> <li> <p>Not supported in bidding (supported only for waterfall mediation).\u00a0\u21a9\u21a9</p> </li> <li> <p>For access to this feature, contact your Liftoff Monetize account manager.\u00a0\u21a9</p> </li> </ol>"},{"location":"privacy/regulatory_solutions/us_states_privacy_laws/","title":"U.S. states privacy laws compliance","text":"<p>Note</p> <p>Important: Please verify you have Account Management permission to complete configuration for EU Consent and GDPR, CCPA, and User Messaging Platform. To learn more please see the following new user roles article.</p> <p>To help publishers comply with U.S. states privacy laws, the Google Mobile Ads SDK allows publishers to use two different parameters to indicate whether Google should enable restricted data processing (RDP). The SDK provides publishers with the ability to set RDP at an ad request level utilizing the following signals:</p> <ul> <li>Google's RDP</li> <li>IAB-defined <code>IABUSPrivacy_String</code></li> </ul> <p>When either parameter is used, Google restricts how it uses certain unique identifiers and other data processed in the provision of services to publishers. As a result, Google will only show non-personalized ads. These parameters override the RDP settings in the UI.</p> <p>Publishers should decide for themselves how restricted data processing can support their compliance plans and when it should be enabled. It is possible to use both optional parameters at the same time, although they have the same effect on Google's ad serving.</p> <p>This guide is intended to help publishers understand the steps required to enable these options on a per-ad request basis.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"privacy/regulatory_solutions/us_states_privacy_laws/#rdp-signal","title":"RDP signal","text":"<p>To notify Google that RDP should be enabled using Google's signal, insert the key rdp as an extra parameter with a value of <code>1</code>.</p> <pre><code>var ad_request := AdRequest.new()\nad_request.extras[\"rdp\"] = 1\n</code></pre> <p>Note</p> <p>Tip: You can use network tracing or a proxy tool such as Charles to capture your app's HTTPS traffic and inspect the ad requests for a &amp;rdp= parameter.</p>"},{"location":"privacy/regulatory_solutions/us_states_privacy_laws/#iab-signal","title":"IAB signal","text":"<p>To notify Google that RDP should be enabled using IAB's signal, insert the key <code>IABUSPrivacy_String</code> as an extra parameter. Make sure that the string value you use is compliant with the IAB specification.</p> <pre><code>var ad_request := AdRequest.new()\nad_request.extras[\"IABUSPrivacy_String\"] = \"IAB_STRING\"\n</code></pre> <p>Note</p> <p>Tip: You can use network tracing or a proxy tool such as Charles to capture your app's HTTPS traffic and inspect the ad requests for a &amp;us_privacy= parameter.</p>"},{"location":"privacy/regulatory_solutions/us_states_privacy_laws/#mediation","title":"Mediation","text":"<p>Note</p> <p>Important: Please verify you have the necessary account permissions to complete mediation configuration. These permissions include access to inventory management, app access, and privacy and messaging features. To learn more please see the following new user roles article.</p> <p>If you use mediation, follow the steps in CPRA settings to add your mediation partners to the CCPA ad partners list in the AdMob UI. Also, consult each ad network partner's documentation to determine what options they offer to help towards CCPA compliance.</p>"},{"location":"privacy/user_messaging_tools/gdpr_iab_support/","title":"GDPR IAB support","text":"<p>This guide outlines the steps required to support the GDPR IAB TCF v2 message as part of the UMP SDK. It is intended to be paired with Get started which gives an overview of how to get your app running with the UMP SDK and the basics of setting up your message. The guidance below is specific to the GDPR IAB TCF v2 message.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"privacy/user_messaging_tools/gdpr_iab_support/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> <li>Create a GDPR message for apps.</li> </ul>"},{"location":"privacy/user_messaging_tools/gdpr_iab_support/#delay-app-measurement","title":"Delay app measurement","text":"<p>By default, the Google Mobile Ads SDK initializes app measurement and begins sending user-level event data to Google immediately when the app starts. This initialization behavior ensures that you can enable AdMob user metrics without making additional code changes.</p> <p>However, if your app requires user consent before these events can be sent, you can delay app measurement until you explicitly initialize the Mobile Ads SDK or load an ad.</p> AndroidiOS <p>To delay app measurement, add the following <code>&lt;meta-data&gt;</code> tag in your <code>res://android/build/AndroidManifest.xml</code>. <pre><code>&lt;manifest&gt;\n    &lt;application&gt;\n    &lt;!-- Delay app measurement until MobileAds.initialize() is called. --&gt;\n    &lt;meta-data\n        android:name=\"com.google.android.gms.ads.DELAY_APP_MEASUREMENT_INIT\"\n        android:value=\"true\"/&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre></p> <p>To delay app measurement, add the <code>GADDelayAppMeasurementInit</code> key with a boolean value of <code>YES</code> to your app's <code>Info.plist</code> of you exported Xcode project. You can make this change programmatically:</p> <pre><code>&lt;key&gt;GADDelayAppMeasurementInit&lt;/key&gt;\n&lt;true/&gt;\n</code></pre>"},{"location":"privacy/user_messaging_tools/gdpr_iab_support/#consent-revocation","title":"Consent revocation","text":"<p>Consent revocability is a requirement of the Privacy &amp; messaging user consent program. You must provide a link in your app's menu that allows users who want to revoke consent to do so, then present the consent message to those users again.</p> <p>To accomplish this:</p> <ol> <li>Load a form every time the user launches your app, so that the form is ready to display in case the user wishes to change their consent setting.</li> <li>Present the form when the user selects the link in your app's menu.</li> </ol> <pre><code>var _consent_form : ConsentForm\n\nfunc present_form() -&gt; void:\n    _consent_form.show(_on_consent_form_dismissed)\n\nfunc _on_consent_form_dismissed(form_error : FormError):\n    # Handle dismissal by reloading form.\n    load_form()\n</code></pre>"},{"location":"privacy/user_messaging_tools/gdpr_iab_support/#mediation","title":"Mediation","text":"<p>Follow the steps in Add ad partners to published GDPR messages to add your mediation partners to the ad partners list. Failure to do so can lead to partners failing to serve ads on your app.</p> <p>Mediation partners might also have additional tools to help with GDPR compliance. See a specific partner's integration guide for more details.</p>"},{"location":"privacy/user_messaging_tools/gdpr_iab_support/#troubleshooting","title":"Troubleshooting","text":"<p>Error 3.3: The TC string last updated date was more than 13 months ago</p> <ul> <li> <p>Consent must be reobtained from the user. You should call <code>UserMessagingPlatform.consent_information.update()</code> at the start of every app session. If the TC string is expired, the UMP SDK indicates that consent must be reobtained by setting <code>ConsentInformation.ConsentStatus</code> to <code>ConsentInformation.ConsentStatus.REQUIRED</code>. If you haven't already, implement a request to load and present a new UMP form in your app.</p> </li> <li> <p>It's possible for the TC string to expire mid-session, resulting in a small amount of <code>3.3</code> errors. And if on the next app session you start loading ads at the same time as you check <code>UserMessagingPlatform.consent_information.update()</code>, those requests could also give <code>3.3</code> errors until <code>UserMessagingPlatform.consent_information.update()</code> completes; however, this should be a tiny fraction of overall <code>3.3</code> errors (less than 0.1%). that are expected.</p> </li> </ul>"},{"location":"privacy/user_messaging_tools/get_started/","title":"Get started","text":"<p>Under the Google EU User Consent Policy, you must make certain disclosures to your users in the European Economic Area (EEA) along with the UK and obtain their consent to use cookies or other local storage, where legally required, and to use personal data (such as AdID) to serve ads. This policy reflects the requirements of the EU ePrivacy Directive and the General Data Protection Regulation (GDPR).</p> <p>To support publishers in meeting their duties under this policy, Google offers the User Messaging Platform (UMP) SDK. The UMP SDK has been updated to support the latest IAB standards. All of these configurations can now conveniently be handled in AdMob privacy &amp; messaging.</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK Android Documentation</li> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"privacy/user_messaging_tools/get_started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> <li>If you're working on GDPR-related requirements, read How IAB requirements affect EU consent messages.</li> </ul>"},{"location":"privacy/user_messaging_tools/get_started/#create-a-message-type","title":"Create a message type","text":"<p>Create user messages with one of the available user message types under the Privacy &amp; messaging tab of your AdMob account. The UMP SDK attempts to display a user message created from the AdMob Application ID set in your project. If no message is configured for your application, the SDK returns an error.</p> <p>For more details, see About privacy and messaging.</p>"},{"location":"privacy/user_messaging_tools/get_started/#determine-if-a-message-needs-to-be-displayed","title":"Determine if a message needs to be displayed","text":"<p>You should request an update of the user's consent information at every app launch, using <code>update()</code> before loading a form. This can determine whether or not your user needs to provide consent if they hadn't done so already or if their consent has expired.</p> <p>Use the information stored in the consentInformation object when you present the form when required.</p> <p>Warning</p> <p>Using alternative ways of checking the consent status\u2014such as checking a cache your app utilizes or looking for a consent string in storage\u2014are strongly discouraged as the set of ad technology partners could have changed since the user last consented.</p> <p>Here is an example of how to check the status on app start:</p> <pre><code>extends Node\n\nfunc _ready():\n    var request := ConsentRequestParameters.new()\n    # Set tag for underage of consent. false means users are not underage.\n    request.tag_for_under_age_of_consent = false\n    UserMessagingPlatform.consent_information.update(request, _on_consent_info_updated_success, _on_consent_info_updated_failure)\n\nfunc _on_consent_info_updated_success():\n    # The consent information state was updated.\n    # You are now ready to check if a form is available.\n    pass\n\nfunc _on_consent_info_updated_failure(form_error : FormError):\n    # Handle the error.\n    pass\n</code></pre>"},{"location":"privacy/user_messaging_tools/get_started/#load-a-form-if-available","title":"Load a form if available","text":"<p>Before displaying a form, you first need to determine if one is available. Unavailable forms can be due to the user enabling limited ad tracking or if you\u2019ve tagged them as under the age of consent.</p> <p>To check the availability of a form, use the <code>get_is_consent_form_available()</code> function on the static <code>consent_information</code> instance of <code>UserMessagingPlatform</code> class.</p> <p>Then, add a wrapper function to load the form:</p> <pre><code>#...\nfunc _on_consent_info_updated_success():\n    # The consent information state was updated.\n    # You are now ready to check if a form is available.\n    if UserMessagingPlatform.consent_information.get_is_consent_form_available():\n        load_form()\n\nfunc _on_consent_info_updated_failure(form_error : FormError):\n    # Handle the error.\n    pass\n\nfunc load_form():\n    pass\n</code></pre> <p>To load the form, use the static <code>load_consent_form()</code> function on the <code>UserMessagingPlatform</code> class.</p> <pre><code>var _consent_form : ConsentForm\n\nfunc load_form():\n    UserMessagingPlatform.load_consent_form(_on_consent_form_load_success, _on_consent_form_load_failure)\n\nfunc _on_consent_form_load_success(consent_form : ConsentForm):\n    _consent_form = consent_form\n\nfunc _on_consent_form_load_failure(form_error : FormError):\n    # Handle the error.\n    pass\n</code></pre>"},{"location":"privacy/user_messaging_tools/get_started/#present-the-form-if-required","title":"Present the form if required","text":"<p>After you\u2019ve determined the form's availability and loaded it, use the <code>show()</code> function on the ConsentForm instance to present the form.</p> <p>Use the static <code>consent_information</code> instance of <code>UserMessagingPlatform</code> class to check the consent status and update your <code>load_form()</code> function:</p> <pre><code>var _consent_form : ConsentForm\n\nfunc load_form():\n    UserMessagingPlatform.load_consent_form(_on_consent_form_load_success, _on_consent_form_load_failure)\n\nfunc _on_consent_form_load_success(consent_form : ConsentForm):\n    _consent_form = consent_form\n    if UserMessagingPlatform.consent_information.get_consent_status() == UserMessagingPlatform.consent_information.ConsentStatus.REQUIRED:\n        consent_form.show(_on_consent_form_dismissed)\n\nfunc _on_consent_form_load_failure(form_error : FormError):\n    # Handle the error.\n    pass\n\nfunc _on_consent_form_dismissed(form_error : FormError):\n    if UserMessagingPlatform.consent_information.get_consent_status() == UserMessagingPlatform.consent_information.ConsentStatus.OBTAINED:\n        # App can start requesting ads.\n        pass\n    # Handle dismissal by reloading form\n    load_form()\n</code></pre> <p>If you need to perform any actions after the user has made a choice or dismissed the form, place that logic in the completion handler or callback for your form.</p>"},{"location":"privacy/user_messaging_tools/get_started/#testing","title":"Testing","text":""},{"location":"privacy/user_messaging_tools/get_started/#force-a-geography","title":"Force a geography","text":"<p>The UMP SDK provides a way to test your app's behavior as though the device was located in the EEA or UK using the <code>debug_geography</code> property on <code>ConsentDebugSettings</code>.</p> <p>You must provide your test device's hashed ID in your app's debug settings to use the debug functionality. If you call <code>UserMessagingPlatform.consent_information.update()</code> without setting this value, your app logs the required ID hash when run.</p> <pre><code>extends Node\n\nfunc _ready():\n    var request := ConsentRequestParameters.new()\n    var consent_debug_settings := ConsentDebugSettings.new()\n    consent_debug_settings.debug_geography = DebugGeography.Values.EEA\n    consent_debug_settings.test_device_hashed_ids.append(\"test_device_hashed_id\")\n    request.consent_debug_settings = consent_debug_settings\n\n    UserMessagingPlatform.consent_information.update(request, _on_consent_info_updated_success, _on_consent_info_updated_failure)\n\nfunc _on_consent_info_updated_success():\n    # The consent information state was updated.\n    # You are now ready to check if a form is available.\n    pass\n\nfunc _on_consent_info_updated_failure(form_error : FormError):\n    # Handle the error.\n    pass\n</code></pre> <p>With the <code>DebugGeography.Values</code> enum, you have the option to force the geography to one of these options:</p> DebugGeography Description DISABLED Debug geography disabled. EEA Geography appears as in EEA for debug devices. NOT_EEA Geography appears as not in the EEA for debug devices. <p>Note that debug settings only work on test devices. Emulators don't need to be added to your device ID list as they already have testing enabled by default.</p>"},{"location":"privacy/user_messaging_tools/get_started/#reset-consent-state","title":"Reset consent state","text":"<p>In testing your app with the UMP SDK, you might find it helpful to reset the state of the SDK so that you can simulate a user's first install experience. The SDK provides the <code>reset()</code> function to do this.</p> <pre><code>UserMessagingPlatform.consent_information.reset()\n</code></pre> <p>You should also call <code>reset()</code> if you decide to remove the UMP SDK completely from your project.</p> <p>Warning</p> <p>This function is intended to be used for testing purposes only. You shouldn't call <code>reset()</code> in production code.</p>"},{"location":"privacy/user_messaging_tools/idfa_support/","title":"IDFA support","text":"<p>This guide outlines the steps required to support the IDFA message as part of the UMP SDK. It is intended to be paired with Get started which gives an overview of how to get your app running with the UMP SDK and the basics of setting up your message. The guidance below is specific to the IDFA message.</p> <p>Note</p> <p>If you enable both GDPR and IDFA messages, refer to Which message your users will see for the possible outcomes</p> <p>This document is based on:</p> <ul> <li>Google Mobile Ads SDK iOS Documentation</li> </ul>"},{"location":"privacy/user_messaging_tools/idfa_support/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Get started guide</li> <li>Create an IDFA message</li> </ul>"},{"location":"privacy/user_messaging_tools/idfa_support/#update-infoplist","title":"Update Info.plist","text":"<p>If you plan to use the UMP SDK to handle Apple's App Tracking Transparency (ATT) requirements, make sure you've created, configured, and published your IDFA explainer message in the AdMob UI.</p> <p>In order for the UMP SDK to display a custom alert message in the iOS system dialog, update your <code>Info.plist</code> to add the <code>NSUserTrackingUsageDescription</code> key with a custom message string describing your usage.</p> <pre><code>&lt;key&gt;NSUserTrackingUsageDescription&lt;/key&gt;\n&lt;string&gt;This identifier will be used to deliver personalized ads to you.&lt;/string&gt;\n</code></pre> <p>The usage description appears as part of the ATT dialog when you present the consent form:</p> <p></p> <p>Then, link the <code>AppTrackingTransparency</code> framework:</p> <p></p> <p>That\u2019s it! Your app will now show an IDFA explainer message prior to the IDFA ATT dialog.</p>"},{"location":"privacy/user_messaging_tools/idfa_support/#testing","title":"Testing","text":"<p>While testing, remember that the IDFA ATT dialog only appears a single time since <code>requestTrackingAuthorization</code> is a one-time request. The UMP SDK only has a form available to load if the authorization status is <code>ATTrackingManagerAuthorizationStatusNotDetermined</code>.</p> <p>To make the alert appear a second time, you must uninstall and reinstall your app on your test device.</p>"}]}